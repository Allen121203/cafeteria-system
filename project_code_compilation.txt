===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\AuthenticatedSessionController.php =====`n<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Illuminate\View\View;
use App\Models\AuditTrail;

class AuthenticatedSessionController extends Controller
{
    // Show login (or redirect if already logged in)
    public function create(): View|RedirectResponse
    {
        if (Auth::check()) {
            if (Auth::user()->role === 'superadmin') return redirect()->route('superadmin.users');
            if (Auth::user()->role === 'admin')      return redirect()->route('admin.dashboard');
            if (Auth::user()->role === 'customer')   return redirect()->route('customer.home');

            // No valid role? Force logout to avoid 403 loop
            Auth::logout();
            return redirect()->route('login');
        }

        return view('auth.login');
    }

    // Login
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();
        Session::regenerate();

        // ✅ Log login action
        AuditTrail::create([
            'user_id' => Auth::id(),
            'action'  => 'Logged in',
            'module'  => 'auth',
            'description' => 'User logged in successfully',
        ]);

        if (Auth::user()->role === 'superadmin') return redirect()->route('superadmin.users');
        if (Auth::user()->role === 'admin')      return redirect()->route('admin.dashboard');

        return redirect()->route('customer.home');
    }

    // Logout
    public function destroy(Request $request): RedirectResponse
    {
        // ✅ Log logout action before session ends
        AuditTrail::create([
            'user_id' => Auth::id(),
            'action'  => 'Logged out',
            'module'  => 'auth',
            'description' => 'User logged out successfully',
        ]);

        Auth::guard('web')->logout();

    Session::invalidate();
    Session::regenerateToken();

        return redirect('/');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\ConfirmablePasswordController.php =====`n<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Illuminate\Validation\ValidationException;
use Illuminate\View\View;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): View
    {
        return view('auth.confirm-password');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'password' => ['required', 'string'],
        ]);

        $email = Auth::user()?->email ?? null;

        if (! Auth::guard('web')->validate([
            'email' => $email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

    Session::put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard', absolute: false));
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\EmailVerificationNotificationController.php =====`n<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        /** @var \App\Models\User|null $user */
        $user = Auth::user();
        if ($user && $user->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false));
        }

        $user?->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\EmailVerificationPromptController.php =====`n<?php



namespace App\Http\Controllers\Auth;


use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Support\Facades\Auth;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|View
    {
        return Auth::user()->hasVerifiedEmail()
            ? redirect()->intended(route('dashboard', absolute: false))
            : view('auth.verify-email');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\NewPasswordController.php =====`n<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): View
    {
        return view('auth.reset-password', ['request' => $request]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function (User $user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\PasswordController.php =====`n<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use Illuminate\Http\RedirectResponse;
use App\Models\AuditTrail;

class PasswordController extends Controller
{
    public function update(Request $request): RedirectResponse
    {
        $data = $request->validate([
            'password' => ['required', 'string', 'min:8', 'confirmed'],
        ]);

        $user = Auth::user();
        if ($user !== null) {
            $user->password = Hash::make($data['password']);
            $user->save();

            // Audit: record password update
            AuditTrail::create([
                'user_id' => $user->id,
                'action' => 'Updated password',
                'module' => 'users',
                'description' => "User {$user->email} updated their password.",
            ]);
        }

        return redirect()->route('profile.edit')->with('status', 'password-updated');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\PasswordResetLinkController.php =====`n<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\View\View;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): View
    {
        return view('auth.forgot-password');
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\RegisteredUserController.php =====`n<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
public function store(Request $request): RedirectResponse
{
    $data = $request->validate([
        'name' => ['required', 'string', 'max:255'],
        'address' => ['nullable', 'string', 'max:255'],
        'contact_no' => ['nullable', 'string', 'max:20'],
        'department' => ['nullable', 'string', 'max:255'],
        'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
        'password' => ['required', 'confirmed', Rules\Password::defaults()],
    ]);

    $user = User::create([
        'name'       => $data['name'],
        'email'      => $data['email'],
        'password'   => Hash::make($data['password']),
        'address'    => $data['address'] ?? null,
        'contact_no' => $data['contact_no'] ?? null,
        'department' => $data['department'] ?? null,
        'role'       => 'customer', // default
    ]);

    Auth::login($user);

    return redirect()->route('customer.home');
}


}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Auth\VerifyEmailController.php =====`n<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Support\Facades\Auth;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        $user = Auth::user();
        if ($user instanceof MustVerifyEmail) {
            if ($user->hasVerifiedEmail()) {
                return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
            }
            if ($user->markEmailAsVerified()) {
                event(new Verified($user));
            }
        }
        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\AdminDashboardController.php =====`n<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

use App\Models\User;
use App\Models\Reservation;
use App\Models\ReservationItem;
use App\Models\InventoryItem;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use Carbon\Carbon;

class AdminDashboardController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth','role:admin']);
    }

    public function index(): View
    {
        $totalReservations = Reservation::count();
        $pendingReservations = Reservation::where('status', 'pending')->count();
        $menusSold = ReservationItem::sum('quantity');
        $lowStocks = InventoryItem::where('qty', '<', 5)->get();
        $outOfStocks = InventoryItem::where('qty', 0)->get();
        $expiringSoon = InventoryItem::where('expiry_date', '<=', Carbon::now()->addDays(7))
            ->where('expiry_date', '>=', Carbon::now())
            ->get();

        return view('admin.dashboard', compact(
            'totalReservations',
            'pendingReservations',
            'menusSold',
            'lowStocks',
            'outOfStocks',
            'expiringSoon'
        ));
    }

    public function store(Request $request): RedirectResponse
    {
        $data = $request->validate([
            'email' => 'required|email|unique:users',
            'name' => 'required',
            'password' => 'required|min:6|confirmed',
        ]);

        $user = User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
        ]);

        $user->assignRole('admin');

        return redirect()->back()->with('success', 'Admin created successfully');
    }

    public function approve(Request $request)
    {
        // TODO: approval logic
        return back()->with('success', 'Reservation approved.');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\CalendarController.php =====`n<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Reservation;
use Carbon\Carbon;
use Illuminate\View\View;

class CalendarController extends Controller
{
public function index(Request $request): View
{
    // Default: current month
    $month = $request->input('month', now()->format('Y-m'));

    $startDate = \Carbon\Carbon::parse($month . '-01')->startOfMonth();
    $endDate = $startDate->copy()->endOfMonth();

    // ✅ Fetch ALL approved reservations (for event list)
    $allApproved = \App\Models\Reservation::with('user')
        ->where('status', 'approved')
        ->orderBy('date', 'asc')
        ->get();

    // ✅ Only reservations in the selected month for calendar view
    $monthlyApproved = $allApproved->filter(function ($res) use ($startDate, $endDate) {
        return \Carbon\Carbon::parse($res->date)->between($startDate, $endDate);
    });

    return view('admin.calendar', [
        'allApproved' => $allApproved,      // for sidebar list
        'monthlyApproved' => $monthlyApproved, // for calendar grid
        'month' => $month,
    ]);
}

}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\Controller.php =====`n<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\CustomerHomeController.php =====`n<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;

class CustomerHomeController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth','role:customer']);
    }

    public function index(): View
    {
        $menus = \App\Models\Menu::with('items')->get();
        return view('customer.home', compact('menus'));
    }

    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'date' => 'required|date|after:today',
            'time' => 'required',
            'guests' => 'required|integer|min:1',
            'menu_id' => 'required|exists:menus,id',
            'quantity' => 'required|integer|min:1',
        ]);

        $reservation = \App\Models\Reservation::create([
            'user_id' => auth()->id(),
            'date' => $request->date,
            'time' => $request->time,
            'guests' => $request->guests,
            'status' => 'pending',
        ]);

        \App\Models\ReservationItem::create([
            'reservation_id' => $reservation->id,
            'menu_id' => $request->menu_id,
            'quantity' => $request->quantity,
        ]);

        return back()->with('success', 'Reservation submitted.');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\InventoryItemController.php =====`n<?php

namespace App\Http\Controllers;

use App\Models\InventoryItem;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;

class InventoryItemController extends Controller
{
    public function index(): View
    {
        // Sorting options: name, qty, expiry_date
        $sort = request('sort', 'name');
        $direction = request('direction', 'asc');

        $items = InventoryItem::orderBy($sort, $direction)->get();

        return view('admin.inventory.index', compact('items', 'sort', 'direction'));
    }

    public function create(): View
    {
        return view('admin.inventory.create');
    }

    public function store(Request $request): RedirectResponse
    {
        $data = $request->validate([
            'name'  => 'required|string|max:255',
            'qty'   => 'required|numeric|min:0',
            'unit'  => 'required|string|max:50',
            'expiry_date' => 'nullable|date',
            'category' => 'required|string|max:100'
        ]);

        InventoryItem::create($data);

        return redirect()->route('admin.inventory.index')->with('success', 'Item added successfully.');
    }

    public function edit(InventoryItem $inventory): View
    {
        return view('admin.inventory.edit', compact('inventory'));
    }

    public function update(Request $request, InventoryItem $inventory): RedirectResponse
    {
        $data = $request->validate([
            'name'  => 'required|string|max:255',
            'qty'   => 'required|numeric|min:0',
            'unit'  => 'required|string|max:50',
            'expiry_date' => 'nullable|date',
            'category' => 'required|string|max:100'
        ]);

        $inventory->update($data);

        return redirect()->route('admin.inventory.index')->with('success', 'Item updated successfully.');
    }

    public function destroy(InventoryItem $inventory): RedirectResponse
    {
        $inventory->delete();
        return back()->with('success', 'Item deleted.');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\MenuController.php =====`n<?php

namespace App\Http\Controllers;

use App\Models\Menu;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Schema;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;

class MenuController extends Controller
{
    private const TYPES = ['standard' => 'Standard Menu', 'special' => 'Special Menu'];
    private const MEALS = [
        'breakfast'  => 'Breakfast',
        'am_snacks'  => 'AM Snacks',
        'lunch'      => 'Lunch',
        'pm_snacks'  => 'PM Snacks',
        'dinner'     => 'Dinner',
    ];
    private const PRICE = [
        'standard' => ['breakfast'=>150, 'am_snacks'=>150, 'lunch'=>300, 'pm_snacks'=>100, 'dinner'=>300],
        'special'  => ['breakfast'=>170, 'am_snacks'=>100, 'lunch'=>350, 'pm_snacks'=>150, 'dinner'=>350],
    ];

    public function index(Request $request): View
    {
        $type = $request->query('type', 'standard');
        $meal = $request->query('meal', 'breakfast');

        $q = Menu::with('items');

        // Guarded filters – only apply if the columns exist
        if (Schema::hasColumn('menus', 'type') && isset(self::TYPES[$type])) {
            $q->where('type', $type);
        }
        if (Schema::hasColumn('menus', 'meal_time') && isset(self::MEALS[$meal])) {
            $q->where('meal_time', $meal);
        }

        // List all menus, ordered by created_at
        $menusByDay = collect(['all' => $q->orderBy('created_at', 'desc')->get()]);

        // Meal counts for the dropdown (guarded)
        if (Schema::hasColumn('menus', 'meal_time')) {
            $counts = Menu::selectRaw('meal_time, COUNT(*) as total')
                ->when(Schema::hasColumn('menus','type') && isset(self::TYPES[$type]),
                    fn($qq) => $qq->where('type', $type))
                ->groupBy('meal_time')
                ->pluck('total', 'meal_time');
        } else {
            $counts = collect();
        }

        $activePrice = self::PRICE[$type][$meal] ?? null;

        return view('admin.menus.index', [
            'type'        => $type,
            'meal'        => $meal,
            'types'       => self::TYPES,
            'meals'       => self::MEALS,
            'activePrice' => $activePrice,
            'menusByDay'  => $menusByDay,
            'counts'      => $counts,
        ]);
    }
    public function create(Request $request): View
    {
        $type = $request->query('type', 'standard');
        $meal = $request->query('meal', 'breakfast');

        // What columns exist right now?
        $has = [
            'type'        => Schema::hasColumn('menus', 'type'),
            'meal_time'   => Schema::hasColumn('menus', 'meal_time'),
            'name'        => Schema::hasColumn('menus', 'name'),
            'description' => Schema::hasColumn('menus', 'description'),
            'price'       => Schema::hasColumn('menus', 'price'),
        ];

        $activePrice = ($has['price'] && isset(self::PRICE[$type][$meal])) ? self::PRICE[$type][$meal] : null;

        return view('admin.menus.create', [
            'type'        => $type,
            'meal'        => $meal,
            'types'       => self::TYPES,
            'meals'       => self::MEALS,
            'activePrice' => $activePrice,
            'has'         => $has,
        ]);
    }

    public function store(Request $request): RedirectResponse
    {
        // Detect columns to validate only what exists
        $hasType   = Schema::hasColumn('menus', 'type');
        $hasMeal   = Schema::hasColumn('menus', 'meal_time');
        $hasName   = Schema::hasColumn('menus', 'name');
        $hasDesc   = Schema::hasColumn('menus', 'description');
        $hasPrice  = Schema::hasColumn('menus', 'price');

        $rules = [];
        if ($hasType) $rules['type'] = 'required|in:standard,special';
        if ($hasMeal) $rules['meal_time'] = 'required|in:breakfast,am_snacks,lunch,pm_snacks,dinner';
        if ($hasName) $rules['name']      = 'nullable|string|max:255';
        if ($hasDesc) $rules['description']= 'nullable|string';
        $rules['items'] = 'array';
        $rules['items.*.name'] = 'required|string|max:255';
        $rules['items.*.type'] = 'required|in:food,drink,dessert';

        $data = $request->validate($rules);

        // If price column exists, auto-set based on type+meal
        if ($hasPrice && $hasType && $hasMeal) {
            $type = $data['type'] ?? 'standard';
            $meal = $data['meal_time'] ?? 'breakfast';
            $data['price'] = self::PRICE[$type][$meal] ?? 0;
        }

        // Build only fields that exist in DB
        $payload = [];
        foreach (['type','meal_time','name','description','price'] as $f) {
            if (isset($data[$f])) $payload[$f] = $data[$f];
        }

        $menu = Menu::create($payload);

        if ($request->has('items') && is_array($request->items)) {
            foreach ($request->items as $item) {
                $menu->items()->create($item);
            }
        }

        return redirect()->route('admin.menus.index')
            ->with('success', 'Menu created. Add at least 5 foods to complete the bundle.');
    }

    public function edit(Menu $menu): View
    {
        return view('admin.menus.edit', compact('menu'));
    }

    public function update(Request $request, Menu $menu): RedirectResponse
    {
        // Similar to store, but for update
        $hasType   = Schema::hasColumn('menus', 'type');
        $hasMeal   = Schema::hasColumn('menus', 'meal_time');
        $hasName   = Schema::hasColumn('menus', 'name');
        $hasDesc   = Schema::hasColumn('menus', 'description');
        $hasPrice  = Schema::hasColumn('menus', 'price');

        $rules = [];
        if ($hasType) $rules['type'] = 'required|in:standard,special';
        if ($hasMeal) $rules['meal_time'] = 'required|in:breakfast,am_snacks,lunch,pm_snacks,dinner';
        if ($hasName) $rules['name']      = 'nullable|string|max:255';
        if ($hasDesc) $rules['description']= 'nullable|string';
        $rules['items'] = 'array';
        $rules['items.*.name'] = 'required|string|max:255';
        $rules['items.*.type'] = 'required|in:food,drink,dessert';

        $data = $request->validate($rules);

        // If price column exists, auto-set based on type+meal
        if ($hasPrice && $hasType && $hasMeal) {
            $type = $data['type'] ?? 'standard';
            $meal = $data['meal_time'] ?? 'breakfast';
            $data['price'] = self::PRICE[$type][$meal] ?? 0;
        }

        // Build only fields that exist in DB
        $payload = [];
        foreach (['type','meal_time','name','description','price'] as $f) {
            if (isset($data[$f])) $payload[$f] = $data[$f];
        }

        $menu->update($payload);

        $menu->items()->delete();
        if ($request->has('items') && is_array($request->items)) {
            foreach ($request->items as $item) {
                $menu->items()->create($item);
            }
        }

        return back()->with('success', 'Menu updated.');
    }

    public function destroy(Menu $menu): RedirectResponse
    {
        $menu->delete();
        return redirect()->route('admin.menus.index')->with('success', 'Menu deleted.');
    }

    public function addItem(Request $request, Menu $menu): RedirectResponse
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'type' => 'required|in:food,drink,dessert',
        ]);

        $menu->items()->create([
            'name' => $request->name,
            'type' => $request->type,
        ]);

        return back()->with('success', 'Menu item added.');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\ProfileController.php =====`n<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Session;
use Illuminate\View\View;   // ✅ Import the correct View

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => Auth::user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
    /** @var \App\Models\User|null $user */
    $user = Auth::user();

        $user?->fill($request->validated());

        if ($user?->isDirty('email')) {
            $user->email_verified_at = null;
        }

        $user?->save();

        return Redirect::route('profile.edit')->with('status', 'profile-updated');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

    /** @var \App\Models\User|null $user */
    $user = \Illuminate\Support\Facades\Auth::user();

        Auth::logout();

        $user->delete();

        Session::invalidate();
        Session::regenerateToken();

        return Redirect::to('/');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\RecipeController.php =====`n<?php
namespace App\Http\Controllers;

use App\Models\MenuItem;
use App\Models\Recipe;
use App\Models\InventoryItem;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;

class RecipeController extends Controller
{
    public function index(MenuItem $menuItem): View
    {
        $menuItem->load('recipes.inventoryItem','menu');
        $inventory = InventoryItem::orderBy('name')->get();
        return view('admin.recipes.index', compact('menuItem','inventory'));
    }

    public function store(Request $request, MenuItem $menuItem): RedirectResponse
    {
        $data = $request->validate([
            'inventory_item_id' => 'required|exists:inventory_items,id',
            'quantity_needed'   => 'required|numeric|min:0.001',
        ]);

        $inventoryItem = InventoryItem::find($data['inventory_item_id']);

        $menuItem->recipes()->updateOrCreate(
            ['inventory_item_id' => $data['inventory_item_id']],
            ['quantity_needed'   => $data['quantity_needed'], 'unit' => $inventoryItem->unit]
        );

        return back()->with('success','Ingredient added/updated.');
    }

    public function destroy(MenuItem $menuItem, Recipe $recipe): RedirectResponse
    {
        abort_unless($recipe->menu_item_id === $menuItem->id, 404);
        $recipe->delete();
        return back()->with('success','Ingredient removed.');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\ReservationController.php =====`n<?php
// app/Http/Controllers/ReservationController.php

namespace App\Http\Controllers;

use App\Models\Reservation;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Notification;
use Illuminate\Support\Facades\Schema;
use App\Notifications\ReservationStatusChanged;

class ReservationController extends Controller
{
    public function index(Request $request)
    {
        $status = $request->query('status');

        $q = Reservation::with(['user','items.menu.items']); // items -> menu -> foods
        if (in_array($status, ['pending','approved','declined'], true)) {
            $q->where('status',$status);
        }

        $reservations = $q->latest()->paginate(10)->withQueryString();

        $counts = Reservation::selectRaw('status, COUNT(*) total')
            ->groupBy('status')->pluck('total','status');

        return view('admin.reservations.index', compact('reservations','status','counts'));
    }

    public function show(Reservation $reservation)
    {
        $reservation->load(['user','items.menu.items']);
        return view('admin.reservations.show', ['r' => $reservation]);
    }

    public function approve(Request $request, Reservation $reservation)
    {
        DB::transaction(function () use ($reservation) {
            $reservation->status = 'approved';
            $reservation->save();

            // Deduct inventory based on recipes (guard every relation)
            $guests = $reservation->guests ?? $reservation->attendees ?? 1;

            foreach ($reservation->items as $resItem) {
                $menu = $resItem->menu;
                $bundleQty = $resItem->quantity ?? 1;
                if (!$menu) continue;

                foreach ($menu->items as $food) {
                    foreach ($food->recipes as $recipe) {
                        $ingredient = $recipe->inventoryItem;
                        if (!$ingredient) continue;
                        $deduct = (float)($recipe->quantity_needed ?? 0) * $bundleQty * $guests;
                        if ($deduct <= 0) continue;
                        $ingredient->qty = max(0, ($ingredient->qty ?? 0) - $deduct);
                        $ingredient->save();
                    }
                }
            }
        });

        $this->notifyCustomer($reservation, 'approved');

        return redirect()
            ->route('admin.reservations.show', $reservation)
            ->with('accepted', true)
            ->with('success', 'Reservation approved and inventory updated.');
    }

    public function decline(Request $request, Reservation $reservation)
    {
        $data = $request->validate(['reason' => 'required|string|max:1000']);

        $reservation->status = 'declined';
        if (Schema::hasColumn('reservations','decline_reason')) {
            $reservation->decline_reason = $data['reason'];
        }
        $reservation->save();

        $this->notifyCustomer($reservation, 'declined', $data['reason']);

        return redirect()
            ->route('admin.reservations.show', $reservation)
            ->with('declined', true)
            ->with('success', 'Reservation declined and customer notified.');
    }

    /** Email + SMS with graceful fallbacks (no crash if not configured locally) */
    protected function notifyCustomer(Reservation $reservation, string $status, ?string $reason = null): void
    {
        $notification = new ReservationStatusChanged($reservation, $status, $reason);

        // Email target
        if ($reservation->relationLoaded('user') ? $reservation->user : $reservation->user()->exists()) {
            optional($reservation->user)->notify($notification);
        } elseif (!empty($reservation->email)) {
            Notification::route('mail', $reservation->email)->notify($notification);
        }

        // SMS (Vonage) only if configured
        $hasVonage = (bool) (config('services.vonage.key') && config('services.vonage.secret'));
        if ($hasVonage) {
            $phone = $reservation->contact_number
                ?? optional($reservation->user)->phone
                ?? optional($reservation->user)->mobile
                ?? null;
            if ($phone) {
                Notification::route('vonage', $phone)->notify($notification);
            }
        }
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Controllers\SuperAdminController.php =====`n<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use App\Models\AuditTrail;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;

class SuperAdminController extends Controller
{
    public function index(): View
    {
        // Show everyone except superadmin
        $users = User::where('role', '!=', 'superadmin')->orderBy('name')->get();

        return view('superadmin.users', compact('users'));
    }

    public function store(Request $request): RedirectResponse
    {
        $data = $request->validate([
            'name'     => ['required','string','max:255'],
            'email'    => ['required','email','unique:users,email'],
            'password' => ['required','string','min:6','confirmed'],
        ]);

        $user = User::create([
            'name'     => $data['name'],
            'email'    => $data['email'],
            'password' => Hash::make($data['password']),
            'role'     => 'admin', // always admin when created by superadmin
        ]);

        AuditTrail::create([
            'user_id'     => Auth::id(),
            'action'      => 'Created Admin',
            'module'      => 'users',
            'description' => "Created admin {$user->email}",
        ]);

        return redirect()->route('superadmin.users')->with('success', 'Admin created successfully.');
    }

    public function update(Request $request, User $user): RedirectResponse
    {
        if ($user->role !== 'admin') {
            return back()->with('error', 'Only admin accounts can be edited.');
        }

        $data = $request->validate([
            'name'  => ['required','string','max:255'],
            'email' => ['required','email','unique:users,email,' . $user->id],
        ]);

        $user->update($data);

        AuditTrail::create([
            'user_id'     => Auth::id(),
            'action'      => 'Updated Admin',
            'module'      => 'users',
            'description' => "Updated admin {$user->email}",
        ]);

        return redirect()->route('superadmin.users')->with('success', 'Admin updated successfully.');
    }

    public function destroy(User $user): RedirectResponse
    {
        $role  = $user->role;
        $email = $user->email;

        $user->delete();

        AuditTrail::create([
            'user_id'     => Auth::id(),
            'action'      => 'Deleted User',
            'module'      => 'users',
            'description' => "Deleted {$role} {$email}",
        ]);

        return back()->with('success', 'User deleted successfully.');
    }

    public function audit(User $user): View
    {
        $audits = AuditTrail::where('user_id', $user->id)->latest()->get();
        return view('superadmin.audit', compact('user','audits'));
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Middleware\RoleMiddleware.php =====`n<?php


namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\Auth;

class RoleMiddleware
{
    public function handle($request, Closure $next, $role)
    {
        if (!Auth::check() || Auth::user()->role !== $role) {
            abort(403, 'Unauthorized');
        }

        return $next($request);
    }
}

`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Requests\Auth\LoginRequest.php =====`n<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Http\Requests\ProfileUpdateRequest.php =====`n<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore(\Illuminate\Support\Facades\Auth::id() ?? null),
            ],
        ];
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\AuditTrail.php =====`n<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class AuditTrail extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'action',
    ];

    // Relationship with user
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\InventoryItem.php =====`n<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class InventoryItem extends Model
{
    protected $fillable = ['name','qty','unit','category','expiry_date'];

    public function recipes()
    {
        return $this->hasMany(Recipe::class);
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\Menu.php =====`n<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

// app/Models/Menu.php
class Menu extends Model
{
    protected $fillable = ['name','description','price','meal_time','type'];

    public function items(){ return $this->hasMany(MenuItem::class); }

    public function scopeMeal($q, $meal) {
        $allowed = ['breakfast','am_snacks','lunch','pm_snacks','dinner'];
        if (in_array($meal, $allowed, true)) $q->where('meal_time', $meal);
        return $q;
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\MenuItem.php =====`n<?php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class MenuItem extends Model
{
    protected $fillable = ['menu_id','name','type'];

    public function menu()
    {
        return $this->belongsTo(Menu::class);
    }

    public function recipes()
    {
        return $this->hasMany(Recipe::class);
    }
}

`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\Payment.php =====`n<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Payment extends Model
{
    //
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\Recipe.php =====`n<?php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Recipe extends Model
{
    protected $fillable = ['menu_item_id','inventory_item_id','quantity_needed','unit'];

    public function menuItem()
    {
        return $this->belongsTo(MenuItem::class);
    }

    public function inventoryItem()
    {
        return $this->belongsTo(InventoryItem::class);
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\Report.php =====`n<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Report extends Model
{
    //
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\Reservation.php =====`n<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Reservation extends Model
{
    protected $fillable = ['user_id', 'date', 'time', 'guests', 'status'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function items()
    {
        return $this->hasMany(ReservationItem::class);
    }
    public function scopeStatus($q, $status)
{
    if (in_array($status, ['pending','approved','declined'], true)) {
        $q->where('status', $status);
    }
    return $q;
}

}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\ReservationItem.php =====`n<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ReservationItem extends Model
{
    protected $fillable = ['reservation_id','menu_id','quantity'];

    public function reservation()
    {
        return $this->belongsTo(Reservation::class);
    }

    public function menu()
    {
        return $this->belongsTo(Menu::class);
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Models\User.php =====`n<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Auth\MustVerifyEmail as MustVerifyEmailTrait;

class User extends Authenticatable implements MustVerifyEmail
{
    /**
     * The primary key associated with the table.
     *
     * @var string
     */
    protected $primaryKey = 'id';
    use HasFactory, Notifiable, MustVerifyEmailTrait;

    protected $fillable = [
        'name',
        'email',
        'password',
        'address',
        'contact_no',
        'department',
        'role',   // ✅ your manual role column
    ];


    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * Simple replacement for Spatie hasRole() when the package is not installed.
     * Checks the `role` string column on the users table.
     */
    public function hasRole(string $role): bool
    {
        return isset($this->role) && $this->role === $role;
    }

    /**
     * Simple replacement for Spatie assignRole() when the package is not installed.
     * This will set the `role` column and save the model.
     */
    public function assignRole(string $role)
    {
        $this->role = $role;
        return $this->save();
    }

    /**
     * Backward compatibility: allow ->contact_number to read the database column contact_no.
     */
    public function getContactNumberAttribute()
    {
        return $this->contact_no;
    }

    /**
     * Backward compatibility: set contact_no when code assigns contact_number.
     */
    public function setContactNumberAttribute($value)
    {
        $this->attributes['contact_no'] = $value;
    }

    /**
     * Send the email verification notification.
     */
    public function sendEmailVerificationNotification()
    {
        $this->notify(new \App\Notifications\VerifyEmail);
    }
}`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Notifications\ReservationStatusChanged.php =====`n<?php
// app/Notifications/ReservationStatusChanged.php

namespace App\Notifications;

use App\Models\Reservation;
use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Notification;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Messages\VonageMessage;

class ReservationStatusChanged extends Notification
{
    use Queueable;

    public function __construct(
        public Reservation $reservation,
        public string $status,          // approved|declined
        public ?string $reason = null
    ) {}

    public function via($notifiable): array
    {
        $channels = ['mail'];
        if (config('services.vonage.key') && config('services.vonage.secret')) {
            $channels[] = 'vonage';
        }
        return $channels;
    }

    public function toMail($notifiable): MailMessage
    {
        $r = $this->reservation;

        $mail = (new MailMessage)
            ->subject('Reservation ' . ucfirst($this->status) . ' - #'.$r->id)
            ->greeting('Hello '.(optional($r->user)->name ?? 'there').',')
            ->line("Your reservation #{$r->id} has been ".strtoupper($this->status).'.')
            ->line('Summary:')
            ->line('• Date(s): '.($r->start_date && $r->end_date ? "{$r->start_date} to {$r->end_date}" : ($r->event_date ?? '—')))
            ->line('• Days: '.($r->days ?? '—'))
            ->line('• Attendees: '.($r->guests ?? $r->attendees ?? '—'))
            ->line('• Location: '.($r->location ?? '—'));

        if ($this->status === 'declined' && $this->reason) {
            $mail->line('Reason for decline: '.$this->reason);
        }

        $mail->action('View Details', url(route('admin.reservations.show', $r)))
             ->line('Thank you!');

        return $mail;
    }

    public function toVonage($notifiable): VonageMessage
    {
        $r = $this->reservation;
        $txt = "Reservation #{$r->id} ".strtoupper($this->status).". ".
               "Attendees: ".($r->guests ?? $r->attendees ?? 'n/a').". ".
               ($this->status==='declined' && $this->reason ? "Reason: {$this->reason}" : 'See email for details.');

        return (new VonageMessage)->content($txt);
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Notifications\VerifyEmail.php =====`n<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class VerifyEmail extends Notification implements ShouldQueue
{
    use Queueable;

    /**
     * Get the notification's delivery channels.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function via($notifiable)
    {
        return ['mail'];
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
    public function toMail($notifiable)
    {
        $verificationUrl = $this->verificationUrl($notifiable);

        return (new MailMessage)
            ->subject('Verify Email Address')
            ->line('Please click the button below to verify your email address.')
            ->action('Verify Email Address', $verificationUrl)
            ->line('If you did not create an account, no further action is required.');
    }

    /**
     * Get the verification URL for the given notifiable.
     *
     * @param  mixed  $notifiable
     * @return string
     */
    protected function verificationUrl($notifiable)
    {
        return url(
            sprintf(
                '/email/verify/%s/%s',
                $notifiable->getKey(),
                sha1($notifiable->getEmailForVerification())
            )
        );
    }
}`n`n
===== C:\xampp\htdocs\cafeteria-system\app\Providers\AppServiceProvider.php =====`n<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Routing\Router;
use App\Http\Middleware\RoleMiddleware;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Register 'role' middleware alias so routes/controllers can use 'role:admin' etc.
        if (class_exists(Router::class)) {
            $router = $this->app->make(Router::class);
            $router->aliasMiddleware('role', RoleMiddleware::class);
        }
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\View\Components\AppLayout.php =====`n<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class AppLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.app');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\app\View\Components\GuestLayout.php =====`n<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class GuestLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.guest');
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\app.php =====`n<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', (string) env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
    ],

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\auth.php =====`n<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the number of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\cache.php =====`n<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-cache-'),

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\database.php =====`n<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
            'transaction_mode' => 'DEFERRED',
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-database-'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
            'max_retries' => env('REDIS_MAX_RETRIES', 3),
            'backoff_algorithm' => env('REDIS_BACKOFF_ALGORITHM', 'decorrelated_jitter'),
            'backoff_base' => env('REDIS_BACKOFF_BASE', 100),
            'backoff_cap' => env('REDIS_BACKOFF_CAP', 1000),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
            'max_retries' => env('REDIS_MAX_RETRIES', 3),
            'backoff_algorithm' => env('REDIS_BACKOFF_ALGORITHM', 'decorrelated_jitter'),
            'backoff_base' => env('REDIS_BACKOFF_BASE', 100),
            'backoff_cap' => env('REDIS_BACKOFF_CAP', 1000),
        ],

    ],

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\filesystems.php =====`n<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\logging.php =====`n<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', (string) env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'handler_with' => [
                'stream' => 'php://stderr',
            ],
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\mail.php =====`n<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url((string) env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
            'retry_after' => 60,
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
            'retry_after' => 60,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\permission.php =====`n<?php

/**
 * Permission config disabled.
 *
 * This application uses a single `role` string column on users and does not
 * require the spatie/laravel-permission package. Keep this file present so any
 * code that references config('permission') doesn't break, but return an
 * inert array to avoid attempting to load Spatie classes.
 */

return [];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\queue.php =====`n<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\services.php =====`n<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\config\session.php =====`n<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "memcached",
    |            "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel')).'-session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\factories\UserFactory.php =====`n<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\0001_01_01_000000_create_users_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('address')->nullable();      // ✅ new
            $table->string('contact_no')->nullable();   // ✅ new
            $table->string('department')->nullable();   // ✅ new
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('role')->default('customer'); // ✅ new column for role
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\0001_01_01_000001_create_cache_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\0001_01_01_000002_create_jobs_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_12_143707_create_permission_tables.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        $teams = config('permission.teams');
        $tableNames = config('permission.table_names');
        $columnNames = config('permission.column_names');
        $pivotRole = $columnNames['role_pivot_key'] ?? 'role_id';
        $pivotPermission = $columnNames['permission_pivot_key'] ?? 'permission_id';

        throw_if(empty($tableNames), new Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.'));
        throw_if($teams && empty($columnNames['team_foreign_key'] ?? null), new Exception('Error: team_foreign_key on config/permission.php not loaded. Run [php artisan config:clear] and try again.'));

        Schema::create($tableNames['permissions'], static function (Blueprint $table) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // permission id
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();

            $table->unique(['name', 'guard_name']);
        });

        Schema::create($tableNames['roles'], static function (Blueprint $table) use ($teams, $columnNames) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // role id
            if ($teams || config('permission.testing')) { // permission.testing is a fix for sqlite testing
                $table->unsignedBigInteger($columnNames['team_foreign_key'])->nullable();
                $table->index($columnNames['team_foreign_key'], 'roles_team_foreign_key_index');
            }
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();
            if ($teams || config('permission.testing')) {
                $table->unique([$columnNames['team_foreign_key'], 'name', 'guard_name']);
            } else {
                $table->unique(['name', 'guard_name']);
            }
        });

        Schema::create($tableNames['model_has_permissions'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotPermission, $teams) {
            $table->unsignedBigInteger($pivotPermission);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_permissions_model_id_model_type_index');

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_permissions_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            } else {
                $table->primary([$pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            }

        });

        Schema::create($tableNames['model_has_roles'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotRole, $teams) {
            $table->unsignedBigInteger($pivotRole);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_roles_model_id_model_type_index');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_roles_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            } else {
                $table->primary([$pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            }
        });

        Schema::create($tableNames['role_has_permissions'], static function (Blueprint $table) use ($tableNames, $pivotRole, $pivotPermission) {
            $table->unsignedBigInteger($pivotPermission);
            $table->unsignedBigInteger($pivotRole);

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');

            $table->primary([$pivotPermission, $pivotRole], 'role_has_permissions_permission_id_role_id_primary');
        });

        app('cache')
            ->store(config('permission.cache.store') != 'default' ? config('permission.cache.store') : null)
            ->forget(config('permission.cache.key'));
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        $tableNames = config('permission.table_names');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding, or drop the tables manually.');
        }

        Schema::drop($tableNames['role_has_permissions']);
        Schema::drop($tableNames['model_has_roles']);
        Schema::drop($tableNames['model_has_permissions']);
        Schema::drop($tableNames['roles']);
        Schema::drop($tableNames['permissions']);
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_12_144001_create_reservations_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
  public function up(): void {
    Schema::create('reservation_items', function (Blueprint $t) {
      $t->id();
      $t->foreignId('reservation_id')->constrained()->cascadeOnDelete();
      $t->foreignId('menu_id')->constrained()->cascadeOnDelete();
      $t->unsignedInteger('quantity')->default(1); // number of bundles ordered
      $t->timestamps();
      $t->unique(['reservation_id','menu_id']);
    });
  }

    public function down(): void
    {
        Schema::dropIfExists('reservations');
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_12_144002_create_menus_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
  public function up(): void {
    Schema::create('menus', function (Blueprint $t) {
      $t->id();
      $t->string('name')->unique();
      $t->text('description')->nullable();
      $t->decimal('price', 10, 2);
      $t->timestamps();
    });
  }
  public function down(): void { Schema::dropIfExists('menus'); }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_12_144004_create_inventory_items_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
    Schema::create('inventory_items', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->integer('qty');
        $table->string('unit'); // e.g. kg, pcs, liters
$table->enum('category', [
    'Perishable', 'Condiments', 'Frozen', 'Beverages', 'Desserts', 'Others'
]);
$table->date('expiry_date')->nullable();
        $table->timestamps();
    });

    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('inventory_items');
    }
};

`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_12_144006_create_payments_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('payments', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('payments');
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_12_144011_create_reports_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('reports', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('reports');
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_13_103208_create_audit_trails_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('audit_trails', function (Blueprint $table) {
            $table->id();

            // Links audit trail to a user
            $table->foreignId('user_id')
                  ->constrained('users')
                  ->onDelete('cascade');

            // What action happened (login, logout, update, delete, etc.)
            $table->string('action');

            // Which part of the system (auth, profile, users, reservations, etc.)
            $table->string('module')->default('general');

            // Optional description (details of the action)
            $table->text('description')->nullable();

            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('audit_trails');
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_14_040849_create_menu_items_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
  public function up(): void {
    Schema::create('menu_items', function (Blueprint $t) {
      $t->id();
      $t->foreignId('menu_id')->constrained()->cascadeOnDelete();
      $t->string('name');
      // type helps you group: ulam/drink/dessert/etc.
      $t->enum('type', ['ulam','drink','dessert','juice','other'])->default('other');
      $t->timestamps();
      $t->unique(['menu_id','name']);
    });
  }
  public function down(): void { Schema::dropIfExists('menu_items'); }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_14_040940_create_recipes_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
  public function up(): void {
    Schema::create('recipes', function (Blueprint $t) {
      $t->id();
      $t->foreignId('menu_item_id')->constrained()->cascadeOnDelete();
      $t->foreignId('inventory_item_id')->constrained()->cascadeOnDelete();
      // quantity needed PER SERVING of this food
      $t->decimal('quantity_needed', 10, 3);
      $t->timestamps();
      $t->unique(['menu_item_id','inventory_item_id']);
    });
  }
  public function down(): void { Schema::dropIfExists('recipes'); }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_26_065119_create_reservation_items_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('reservation_items', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('reservation_items');
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_26_071731_add_reservation_fk_to_reservation_items.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::table('reservation_items', function (Blueprint $table) {
            // add reservation_id if it's missing
            if (!Schema::hasColumn('reservation_items', 'reservation_id')) {
                $table->foreignId('reservation_id')
                      ->after('id')
                      ->constrained('reservations')
                      ->cascadeOnDelete();
            }

            // ensure menu_id exists too (Eloquent also expects this)
            if (!Schema::hasColumn('reservation_items', 'menu_id')) {
                $table->foreignId('menu_id')
                      ->after('reservation_id')
                      ->constrained('menus')
                      ->cascadeOnDelete();
            }

            // ensure quantity exists
            if (!Schema::hasColumn('reservation_items', 'quantity')) {
                $table->unsignedInteger('quantity')->default(1)->after('menu_id');
            }
        });
    }

    public function down(): void
    {
        Schema::table('reservation_items', function (Blueprint $table) {
            if (Schema::hasColumn('reservation_items', 'reservation_id')) {
                $table->dropForeign(['reservation_id']);
                $table->dropColumn('reservation_id');
            }
            if (Schema::hasColumn('reservation_items', 'menu_id')) {
                $table->dropForeign(['menu_id']);
                $table->dropColumn('menu_id');
            }
            if (Schema::hasColumn('reservation_items', 'quantity')) {
                $table->dropColumn('quantity');
            }
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_26_112441_add_meal_time_to_menus.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (!Schema::hasColumn('menus', 'meal_time')) {
                // SAFE: no "after(...)" so it won't care about column order
                $table->enum('meal_time', [
                    'breakfast','am_snacks','lunch','pm_snacks','dinner'
                ])->default('breakfast');
            }
        });
    }

    public function down(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (Schema::hasColumn('menus', 'meal_time')) {
                $table->dropColumn('meal_time');
            }
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_26_113616_add_name_to_menus.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (!Schema::hasColumn('menus', 'name')) {
                $table->string('name')->nullable()->after('id');
            }
        });
    }

    public function down(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (Schema::hasColumn('menus', 'name')) {
                $table->dropColumn('name');
            }
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_27_115519_add_quantity_needed_to_recipes_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('recipes', function (Blueprint $table) {
            $table->decimal('quantity_needed', 10, 3)->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('recipes', function (Blueprint $table) {
            $table->dropColumn('quantity_needed');
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_27_120000_rename_quantity_to_quantity_needed_in_recipes_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('recipes', function (Blueprint $table) {
            $table->renameColumn('quantity', 'quantity_needed');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('recipes', function (Blueprint $table) {
            $table->renameColumn('quantity_needed', 'quantity');
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_27_124000_add_default_to_number_in_menus_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (Schema::hasColumn('menus', 'number')) {
                $table->integer('number')->default(1)->change();
            }
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (Schema::hasColumn('menus', 'number')) {
                $table->integer('number')->nullable(false)->default(null)->change();
            }
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_27_125000_drop_unique_on_number_in_menus_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            $table->dropUnique('menus_number_unique');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            $table->unique('number');
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_27_133228_add_decline_reason_to_reservations.php =====`n<?php
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class {
    public function up(): void {
        Schema::table('reservations', function (Blueprint $t) {
            if (!Schema::hasColumn('reservations','decline_reason')) {
                $t->text('decline_reason')->nullable();
            }
        });
    }
    public function down(): void {
        Schema::table('reservations', function (Blueprint $t) {
            if (Schema::hasColumn('reservations','decline_reason')) {
                $t->dropColumn('decline_reason');
            }
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_28_083535_drop_menu_type_and_day_no_from_menus_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (Schema::hasColumn('menus', 'menu_type')) {
                $table->dropColumn('menu_type');
            }
            if (Schema::hasColumn('menus', 'day_no')) {
                $table->dropColumn('day_no');
            }
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (!Schema::hasColumn('menus', 'menu_type')) {
                $table->enum('menu_type', ['standard', 'special'])->default('standard');
            }
            if (!Schema::hasColumn('menus', 'day_no')) {
                $table->integer('day_no')->default(1);
            }
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\migrations\2025_09_28_091150_drop_number_from_menus_table.php =====`n<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            if (Schema::hasColumn('menus', 'number')) {
                $table->dropColumn('number');
            }
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('menus', function (Blueprint $table) {
            //
        });
    }
};
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\seeders\DatabaseSeeder.php =====`n<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
public function run(): void
{
    $this->call([
        UserSeeder::class, // if you already have one
        ReservationSeeder::class,
    ]);
}

}
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\seeders\ReservationSeeder.php =====`n<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Reservation;
use App\Models\User;

class ReservationSeeder extends Seeder
{
    public function run(): void
    {
        $customers = User::where('role', 'customer')->take(5)->get();

        if ($customers->isEmpty()) {
            $this->command->warn('⚠ No customers found. Please seed users first.');
            return;
        }

        $sampleData = [
            ['guests' => 10, 'date' => '2025-09-15', 'time' => '12:00:00', 'status' => 'approved'],
            ['guests' => 20, 'date' => '2025-09-18', 'time' => '14:00:00', 'status' => 'pending'],
            ['guests' => 15, 'date' => '2025-09-20', 'time' => '18:30:00', 'status' => 'declined'],
            ['guests' => 8,  'date' => '2025-09-22', 'time' => '10:15:00', 'status' => 'approved'],
            ['guests' => 25, 'date' => '2025-09-25', 'time' => '20:00:00', 'status' => 'pending'],
        ];

        foreach ($customers as $index => $customer) {
            Reservation::create([
                'user_id' => $customer->id,
                'date'    => $sampleData[$index]['date'],
                'time'    => $sampleData[$index]['time'],
                'guests'  => $sampleData[$index]['guests'],
                'status'  => $sampleData[$index]['status'],
            ]);
        }
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\database\seeders\UserSeeder.php =====`n<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use Illuminate\Support\Facades\Hash;

class UserSeeder extends Seeder
{
    public function run(): void
    {
        // ✅ Super Admin (create only if not exists)
        User::firstOrCreate(
            ['email' => 'superadmin@example.com'],
            [
                'name' => 'Super Admin',
                'password' => Hash::make('password123'),
                'role' => 'superadmin',
                'contact_no' => '09123456789',
            ]
        );

        // ✅ Create 5 Customers
        for ($i = 1; $i <= 5; $i++) {
            User::firstOrCreate(
                ['email' => "customer{$i}@example.com"],
                [
                    'name' => "Customer {$i}",
                    'password' => Hash::make('password123'),
                    'role' => 'customer',
                    'contact_no' => '0912345678' . $i,
                ]
            );
        }
    }
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\css\app.css =====`n@tailwind base;
@tailwind components;
@tailwind utilities;
[x-cloak] {
    display: none !important;
}
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\js\app.js =====`nimport './bootstrap';

import Alpine from 'alpinejs';

window.Alpine = Alpine;

Alpine.start();
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\js\bootstrap.js =====`nimport axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\inventory\create.blade.php =====`n<!-- Modal Background -->
<div id="addItemModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <!-- Modal Box -->
    <div class="bg-white rounded-lg shadow-lg w-full max-w-lg p-6 relative">
        <!-- Close Button -->
        <button onclick="document.getElementById('addItemModal').classList.add('hidden')" 
                class="absolute top-2 right-2 text-gray-500 hover:text-gray-800 text-xl">
            &times;
        </button>

        <h2 class="text-xl font-bold mb-4">Add Inventory Item</h2>

        <form action="{{ route('admin.inventory.store') }}" method="POST" class="space-y-4">
            @csrf

            <!-- Item Name -->
            <div>
                <label for="name" class="block text-sm font-medium">Item Name</label>
                <input type="text" name="name" id="name" required
                    class="w-full border rounded p-2 focus:ring focus:ring-blue-300">
            </div>

            <!-- Category -->
            <div>
                <label for="category" class="block text-sm font-medium">Category</label>
                <select name="category" id="category" required
                    class="w-full border rounded p-2 focus:ring focus:ring-blue-300">
                    <option value="">-- Select Category --</option>
                    <option value="Perishable">Perishable</option>
                    <option value="Condiments">Condiments</option>
                    <option value="Frozen">Frozen</option>
                    <option value="Beverages">Beverages</option>
                    <option value="Others">Others</option>
                </select>
            </div>

            <!-- Quantity -->
            <div>
                <label for="qty" class="block text-sm font-medium">Quantity</label>
                <input type="number" name="qty" id="qty" min="1" required
                    class="w-full border rounded p-2 focus:ring focus:ring-blue-300">
            </div>

            <!-- Unit -->
            <div>
                <label for="unit" class="block text-sm font-medium">Unit</label>
                <select name="unit" id="unit" required
                    class="w-full border rounded p-2 focus:ring focus:ring-blue-300">
                    <option value="">-- Select Unit --</option>
                    <option value="Pieces">Pieces</option>
                    <option value="Kgs">Kgs</option>
                    <option value="Liters">Liters</option>
                    <option value="Packs">Packs</option>
                </select>
            </div>

            <!-- Expiry Date -->
            <div>
                <label for="expiry_date" class="block text-sm font-medium">Expiry Date</label>
                <input type="date" name="expiry_date" id="expiry_date"
                    class="w-full border rounded p-2 focus:ring focus:ring-blue-300">
                <small class="text-gray-500">Leave blank if not applicable.</small>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end">
                <button type="submit" 
                    class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                    Save Item
                </button>
            </div>
        </form>
    </div>
</div>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\inventory\edit.blade.php =====`n`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\inventory\index.blade.php =====`n@extends('layouts.sidebar')
@section('page-title', 'Inventory Management')

@section('content')
<div class="bg-white p-6 rounded shadow">
    <h1 class="text-2xl font-bold mb-4">Inventory</h1>

<!-- Add Item Button -->
<button onclick="document.getElementById('addItemModal').classList.remove('hidden')"
    class="bg-green-600 text-white px-4 py-2 rounded">
    + Add Item
</button>


    <table class="w-full mt-6 border-collapse border">
        <thead>
            <tr class="bg-gray-200">
                <th><a href="?sort=name">Item</a></th>
                <th><a href="?sort=qty">Quantity</a></th>
                <th>Unit</th>
                <th><a href="?sort=expiry_date">Expiry Date</a></th>
                <th>Category</th>
                <th>Last Updated</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @forelse($items as $item)
                <tr>
                    <td>{{ $item->name }}</td>
                    <td>{{ $item->qty }}</td>
                    <td>{{ $item->unit }}</td>
                    <td>{{ $item->expiry_date ?? 'N/A' }}</td>
                    <td>{{ $item->category }}</td>
                    <td>{{ $item->updated_at->diffForHumans() }}</td>
                    <td>
                        <a href="{{ route('admin.inventory.edit', $item) }}" class="text-blue-600">Edit</a>
                        <form action="{{ route('admin.inventory.destroy', $item) }}" method="POST" class="inline">
                            @csrf @method('DELETE')
                            <button class="text-red-600 ml-2">Delete</button>
                        </form>
                    </td>
                </tr>
            @empty
                <tr><td colspan="7" class="text-center text-gray-500">No inventory items found.</td></tr>
            @endforelse
        </tbody>
    </table>
</div>
@endsection
@include('admin.inventory.create')
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\menus\index.blade.php =====`n@extends('layouts.sidebar')
@section('page-title','Menu Bundles')

@section('content')
@php
    $menuPrices = $priceMap ?? $prices ?? [
        'standard' => ['breakfast' => 150, 'am_snacks' => 150, 'lunch' => 300, 'pm_snacks' => 100, 'dinner' => 300],
        'special'  => ['breakfast' => 170, 'am_snacks' => 100, 'lunch' => 350, 'pm_snacks' => 150, 'dinner' => 350],
    ];
@endphp

<style>[x-cloak]{ display:none !important; }</style>

<div x-data='menuCreateModal({
        defaultType: @json($type),
        defaultMeal: @json($meal),
        prices: @json($menuPrices)
     })'
     class="bg-white p-6 rounded shadow w-full">

  {{-- Header --}}
  <div class="flex items-center justify-between gap-2 flex-wrap w-full">
    <h1 class="text-2xl font-bold">Menu Bundles</h1>

    <button type="button"
            @click="openCreate()"
            class="bg-blue-600 text-white px-4 py-2 rounded">
      + Add Menu
    </button>
  </div>

  {{-- Type Tabs --}}
  <div class="mt-4 flex gap-2">
    @foreach($types as $key => $label)
      <a href="{{ route('admin.menus.index', ['type'=>$key,'meal'=>$meal]) }}"
         class="px-4 py-2 rounded-full border
                {{ $type === $key ? 'bg-slate-900 text-white border-slate-900' : 'bg-slate-100 text-slate-700 hover:bg-slate-200 border-transparent' }}">
        {{ $label }}
      </a>
    @endforeach
  </div>

  {{-- Meal Filter --}}
  <form method="GET" action="{{ route('admin.menus.index') }}" class="mt-4 flex items-center gap-3">
    <input type="hidden" name="type" value="{{ $type }}">
    <label class="text-sm text-gray-600">Meal time:</label>
    <select name="meal" class="border rounded p-2" onchange="this.form.submit()">
      @foreach($meals as $key => $label)
        @php $count = data_get($counts, $key, 0); @endphp
        <option value="{{ $key }}" {{ $meal === $key ? 'selected' : '' }}>
          {{ $label }} {{ $count ? "($count)" : '' }}
        </option>
      @endforeach
    </select>
    @if(request('type') || request('meal'))
      <a href="{{ route('admin.menus.index') }}" class="text-sm text-blue-700 underline">Clear</a>
    @endif
  </form>

  {{-- Fixed price pill --}}
  <div class="mt-3 text-sm">
    <span class="px-2 py-1 rounded bg-gray-100 text-gray-700">
      <strong>{{ ucfirst($type) }}</strong> •
      <strong>{{ data_get($meals, $meal, data_get($meals, 'breakfast', '')) }}</strong> •
      Fixed: <strong>₱{{ number_format($activePrice,2) }}</strong> / head
    </span>
  </div>

  {{-- Show all menus in a responsive grid --}}
  <div class="mt-5 grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
    @foreach(data_get($menusByDay, 'all', collect()) as $menu)
      <div id="menu-card-{{ $menu->id }}" class="border rounded-lg p-4 h-full">
        <div class="flex items-start justify-between">
          <div>
            <div class="text-xs uppercase tracking-wide text-slate-500">
              {{ strtoupper(str_replace('_',' ', $menu->meal_time ?? $meal)) }}
            </div>
            <h2 class="text-lg font-semibold">{{ $menu->name ?? 'Menu #'.$menu->id }}</h2>
            <div class="text-slate-600 text-sm">
              ₱{{ number_format($menu->price ?? $activePrice, 2) }} / head
            </div>
            @if(!empty($menu->description))
              <p class="text-gray-600 text-sm mt-2">{{ $menu->description }}</p>
            @endif
          </div>
          <div class="flex gap-2">
            <button type="button"
                    @click='openEdit({{ $menu->id }}, @json($menu->name), @json($menu->description), @json($menu->type), @json($menu->meal_time), @json($menu->items->map(function($i) { return ["name" => $i->name, "type" => $i->type]; })->toArray()))'
                    class="text-blue-600 text-sm">
              Edit
            </button>
            <button type="button"
                    @click='openDelete({{ $menu->id }}, @json($menu->name ?? ("Menu #".$menu->id)))'
                    class="text-red-600 text-sm">
              Delete
            </button>
          </div>
        </div>

        <div class="mt-3">
          <div class="text-xs text-slate-500 mb-1">Foods ({{ $menu->items->count() }})</div>
          @if($menu->items->count())
            <ul class="space-y-1">
              @foreach($menu->items as $food)
                <li class="flex items-center justify-between text-sm">
                  <span>{{ $food->name }} <span class="text-xs text-gray-500">({{ $food->type }})</span></span>
                  <a href="{{ route('admin.recipes.index', $food) }}" class="text-green-700 text-xs underline">Recipe</a>
                </li>
              @endforeach
            </ul>
          @else
            <div class="text-sm text-slate-500">No items yet.</div>
          @endif
        </div>
      </div>
    @endforeach
  </div>

  {{-- CREATE MENU MODAL --}}
  <div x-cloak x-show="isCreateOpen" x-transition
       class="fixed inset-0 z-50 flex items-center justify-center">
    <div @click="close()" class="absolute inset-0 bg-black/40"></div>

    <div class="relative bg-white w-full max-w-xl rounded-xl shadow-lg p-6">
      <button class="absolute top-2 right-3 text-gray-500 hover:text-black" @click="close()">✕</button>

      <h2 class="text-xl font-semibold mb-4">Create Menu</h2>

      <form x-ref="createForm" method="POST" action="{{ route('admin.menus.store') }}" class="space-y-4">
        @csrf

        <div>
          <label class="block text-sm font-medium">Menu type</label>
          <select name="type" class="border rounded p-2 w-full mt-1" x-model="form.type" required>
            <option value="standard">Standard Menu</option>
            <option value="special">Special Menu</option>
          </select>
        </div>

        <div>
          <label class="block text-sm font-medium">Meal time</label>
          <select name="meal_time" class="border rounded p-2 w-full mt-1" x-model="form.meal" required>
            <option value="breakfast">Breakfast</option>
            <option value="am_snacks">AM Snacks</option>
            <option value="lunch">Lunch</option>
            <option value="pm_snacks">PM Snacks</option>
            <option value="dinner">Dinner</option>
          </select>
        </div>

        <div>
          <label class="block text-sm font-medium">Display name (optional)</label>
          <input name="name" class="border rounded p-2 w-full mt-1" placeholder="e.g., Breakfast Menu" x-model="form.name">
        </div>

        <div>
          <label class="block text-sm font-medium">Description (optional)</label>
          <textarea name="description" class="border rounded p-2 w-full mt-1" rows="3"
                    placeholder="Short description..." x-model="form.description"></textarea>
        </div>

        {{-- Menu Items --}}
        <div class="border rounded p-3">
          <h3 class="font-medium mb-2">Menu Items (Foods)</h3>
          <div class="space-y-2">
            <template x-for="(item, index) in form.items" :key="index">
              <div class="flex gap-2 items-end">
                <input type="text" :name="'items[' + index + '][name]'" x-model="item.name" placeholder="Food name" class="flex-1 border rounded p-2" required>
                <select :name="'items[' + index + '][type]'" x-model="item.type" class="border rounded p-2">
                  <option value="food">Food/Main Dish</option>
                  <option value="drink">Drink</option>
                  <option value="dessert">Dessert</option>
                </select>
                <button type="button" @click="form.items.splice(index, 1)" class="text-red-600">Remove</button>
              </div>
            </template>
            <button type="button" @click="form.items.push({name: '', type: 'food'})" class="text-blue-600 underline text-sm">+ Add Item</button>
          </div>
        </div>

        <div class="text-xs text-gray-600">
          Fixed price per head:
          <span class="font-semibold" x-text="priceText"></span>
          <span class="text-gray-500">(auto-applied on save)</span>
        </div>

        <div class="flex justify-end gap-2 pt-2">
          <button type="button" @click="close()" class="px-4 py-2 bg-gray-200 rounded">Cancel</button>
          <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Create</button>
        </div>
      </form>
    </div>
  </div>

  {{-- EDIT MENU MODAL --}}
  <div x-cloak x-show="isEditOpen" x-transition
       class="fixed inset-0 z-50 flex items-center justify-center">
    <div @click="closeEdit()" class="absolute inset-0 bg-black/40"></div>

    <div class="relative bg-white w-full max-w-xl rounded-xl shadow-lg p-6">
      <button class="absolute top-2 right-3 text-gray-500 hover:text-black" @click="closeEdit()">✕</button>

      <h2 class="text-xl font-semibold mb-4">Edit Menu</h2>

      <form method="POST" action="" x-ref="editForm" class="space-y-4">
        @csrf @method('PATCH')

        <div>
          <label class="block text-sm font-medium">Menu type</label>
          <select name="type" class="border rounded p-2 w-full mt-1" x-model="editForm.type" required>
            <option value="standard">Standard Menu</option>
            <option value="special">Special Menu</option>
          </select>
        </div>

        <div>
          <label class="block text-sm font-medium">Meal time</label>
          <select name="meal_time" class="border rounded p-2 w-full mt-1" x-model="editForm.meal" required>
            <option value="breakfast">Breakfast</option>
            <option value="am_snacks">AM Snacks</option>
            <option value="lunch">Lunch</option>
            <option value="pm_snacks">PM Snacks</option>
            <option value="dinner">Dinner</option>
          </select>
        </div>

        <div>
          <label class="block text-sm font-medium">Display name (optional)</label>
          <input name="name" class="border rounded p-2 w-full mt-1" placeholder="e.g., Breakfast Menu" x-model="editForm.name">
        </div>

        <div>
          <label class="block text-sm font-medium">Description (optional)</label>
          <textarea name="description" class="border rounded p-2 w-full mt-1" rows="3"
                    placeholder="Short description..." x-model="editForm.description"></textarea>
        </div>

        {{-- Menu Items --}}
        <div class="border rounded p-3">
          <h3 class="font-medium mb-2">Menu Items (Foods)</h3>
          <div class="space-y-2">
            <template x-for="(item, index) in editForm.items" :key="index">
              <div class="flex gap-2 items-end">
                <input type="text" :name="'items[' + index + '][name]'" x-model="item.name" placeholder="Food name" class="flex-1 border rounded p-2" required>
                <select :name="'items[' + index + '][type]'" x-model="item.type" class="border rounded p-2">
                  <option value="food">Food/Main Dish</option>
                  <option value="drink">Drink</option>
                  <option value="dessert">Dessert</option>
                </select>
                <button type="button" @click="editForm.items.splice(index, 1)" class="text-red-600">Remove</button>
              </div>
            </template>
            <button type="button" @click="editForm.items.push({name: '', type: 'food'})" class="text-blue-600 underline text-sm">+ Add Item</button>
          </div>
        </div>

        <div class="text-xs text-gray-600">
          Fixed price per head:
          <span class="font-semibold" x-text="editPriceText"></span>
          <span class="text-gray-500">(auto-applied on save)</span>
        </div>

        <div class="flex justify-end gap-2 pt-2">
          <button type="button" @click="closeEdit()" class="px-4 py-2 bg-gray-200 rounded">Cancel</button>
          <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Update</button>
        </div>
      </form>
    </div>
  </div>

  {{-- DELETE MENU MODAL (teleported, same Alpine scope) --}}
  <template x-teleport="body">
    <div x-cloak x-show="isDeleteOpen"
         @keydown.escape.window="closeDelete()"
         class="fixed inset-0 z-[100]">
      <div class="absolute inset-0 bg-black/40" @click="closeDelete()"></div>

      <div class="absolute inset-0 flex items-center justify-center p-4">
        <div x-transition
             class="relative bg-white w-full max-w-md rounded-xl shadow-lg p-6"
             role="dialog" aria-modal="true"
             aria-labelledby="delete-title" aria-describedby="delete-desc">

          <button class="absolute top-2 right-3 text-gray-500 hover:text-black"
                  @click="closeDelete()" aria-label="Close">✕</button>

          <h2 id="delete-title" class="text-xl font-semibold mb-2">Delete Menu</h2>

          <p id="delete-desc" class="text-gray-600 mb-4">
            Are you sure you want to delete
            <span class="font-semibold" x-text="deleteName || 'this menu'"></span>?
            This action cannot be undone.
          </p>

          {{-- AJAX delete: stay on current page, remove card, close modal --}}
          <form @submit.prevent="confirmDelete" class="flex justify-end gap-2">
            @csrf
            @method('DELETE')

            <button type="button" @click="closeDelete()"
                    class="px-4 py-2 bg-gray-200 rounded">Cancel</button>

            <button type="submit"
                    class="px-4 py-2 bg-red-600 text-white rounded">
              Delete
            </button>
          </form>
        </div>
      </div>
    </div>
  </template>

</div>

{{-- Alpine component --}}
<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('menuCreateModal', (opts = {}) => ({
      // State
      isCreateOpen: false,
      isEditOpen: false,
      isDeleteOpen: false,

      deleteId: null,
      deleteName: '',

      prices: opts.prices || {
        standard: { breakfast:150, am_snacks:150, lunch:300, pm_snacks:100, dinner:300 },
        special:  { breakfast:170, am_snacks:100, lunch:350, pm_snacks:150, dinner:350 },
      },

      form: {
        type:  opts.defaultType || 'standard',
        meal:  opts.defaultMeal || 'breakfast',
        name:  '',
        description: '',
        items: []
      },

      editForm: {
        id: null,
        type: 'standard',
        meal: 'breakfast',
        name: '',
        description: '',
        items: []
      },

      // Methods
      openCreate(type = null, meal = null) {
        if (type) this.form.type = type;
        if (meal) this.form.meal = meal;
        this.form.items = [];
        this.isCreateOpen = true;
      },
      close(){ this.isCreateOpen = false; },

      openEdit(id, name, description, type, meal, items = []) {
        this.editForm.id = id;
        this.editForm.name = name || '';
        this.editForm.description = description || '';
        this.editForm.type = type || 'standard';
        this.editForm.meal = meal || 'breakfast';
        this.editForm.items = (items || []).map(i => ({ name: i.name, type: i.type }));

        // set form action safely
        this.$refs.editForm.action = `{{ url('/admin/menus') }}/${id}`;

        this.isEditOpen = true;
      },
      closeEdit(){ this.isEditOpen = false; },

      openDelete(id, name = 'this menu') {
        this.deleteId = id;
        this.deleteName = name || 'this menu';
        this.isDeleteOpen = true;
        document.body.style.overflow = 'hidden';
      },
      closeDelete() {
        this.isDeleteOpen = false;
        this.deleteId = null;
        this.deleteName = '';
        document.body.style.overflow = '';
      },

      // AJAX delete, stay on current page and remove the card
      async confirmDelete() {
        if (!this.deleteId) return;

        const url = `{{ url('/admin/menus') }}/${this.deleteId}`;
        const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';

        try {
          const res = await fetch(url, {
            method: 'POST', // Laravel DELETE via method spoofing
            headers: {
              'X-CSRF-TOKEN': token,
              'X-Requested-With': 'XMLHttpRequest',
              'Accept': 'application/json, text/plain, */*',
              'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            body: new URLSearchParams({ _method: 'DELETE' })
          });

          // 200/204 are typical; some apps redirect with 302 but we ignore response and proceed
          if (!res.ok && res.status !== 204) {
            console.warn('Delete failed', await res.text());
          }

          const card = document.getElementById('menu-card-' + this.deleteId);
          if (card) card.remove();

          this.closeDelete(); // close modal, stay on page
        } catch (e) {
          console.error('Delete error', e);
          this.closeDelete();
        }
      },

      // Price helpers (getters so they auto-react)
      get priceText() {
        const t = this.form.type, m = this.form.meal;
        const v = (this.prices[t] && this.prices[t][m]) ? this.prices[t][m] : 0;
        return '₱' + Number(v).toFixed(2) + ' / head';
      },
      get editPriceText() {
        const t = this.editForm.type, m = this.editForm.meal;
        const v = (this.prices[t] && this.prices[t][m]) ? this.prices[t][m] : 0;
        return '₱' + Number(v).toFixed(2) + ' / head';
      },
    }));
  });
</script>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\recipes\index.blade.php =====`n@extends('layouts.sidebar')
@section('page-title','Recipe: '.$menuItem->name)

@section('content')
<div class="bg-white p-6 rounded shadow">
  <h1 class="text-2xl font-bold mb-2">Recipe for: {{ $menuItem->name }}</h1>
  <p class="text-gray-500">Bundle: {{ $menuItem->menu->name }}</p>

  <form action="{{ route('admin.recipes.store', $menuItem) }}" method="POST" class="mt-4 flex gap-3">
    @csrf
    <select name="inventory_item_id" class="border rounded p-2" required>
      <option value="">-- Select Ingredient --</option>
      @foreach($inventory as $inv)
        <option value="{{ $inv->id }}">{{ $inv->name }} ({{ $inv->qty }} {{ $inv->unit }} left)</option>
      @endforeach
    </select>
    <input type="number" step="0.001" name="quantity_needed" class="border rounded p-2 w-36" placeholder="Qty per serving" required>
    <button class="bg-green-600 text-white px-4 py-2 rounded">Add/Update</button>
  </form>

  <table class="w-full mt-5 border-collapse border">
    <thead class="bg-gray-100">
      <tr><th class="p-2 text-left">Ingredient</th><th>Qty per serving</th><th>Action</th></tr>
    </thead>
    <tbody>
      @forelse($menuItem->recipes as $r)
        <tr class="border-t">
          <td class="p-2">{{ $r->inventoryItem->name }}</td>
          <td>{{ $r->quantity_needed }} {{ $r->inventoryItem->unit }}</td>
          <td class="text-center">
            <form action="{{ route('admin.recipes.destroy', [$menuItem,$r]) }}" method="POST">
              @csrf @method('DELETE')
              <button class="text-red-600">Remove</button>
            </form>
          </td>
        </tr>
      @empty
        <tr><td colspan="3" class="text-center text-gray-500">No ingredients yet.</td></tr>
      @endforelse
    </tbody>
  </table>
</div>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\reservations\index.blade.php =====`n@extends('layouts.sidebar')
@section('page-title', 'Reservations')

@section('content')
<div class="bg-white p-6 rounded shadow">
  <div class="flex items-center justify-between mb-4">
    <h1 class="text-2xl font-bold">Reservations</h1>

    <!-- Status Filter -->
    <form method="GET" action="{{ route('admin.reservations') }}" class="flex items-center gap-2">
      <label class="text-sm text-gray-600">Filter:</label>
      <select name="status" class="border rounded p-2" onchange="this.form.submit()">
        @php
          $pending  = data_get($counts, 'pending', 0);
          $approved = data_get($counts, 'approved', 0);
          $declined = data_get($counts, 'declined', 0);
        @endphp
        <option value="" {{ $status === null ? 'selected' : '' }}>All</option>
        <option value="pending"  {{ $status === 'pending'  ? 'selected' : '' }}>Pending {{ $pending  ? "($pending)"  : '' }}</option>
        <option value="approved" {{ $status === 'approved' ? 'selected' : '' }}>Approved {{ $approved ? "($approved)" : '' }}</option>
        <option value="declined" {{ $status === 'declined' ? 'selected' : '' }}>Declined {{ $declined ? "($declined)" : '' }}</option>
      </select>

      @if(request('status'))
        <a href="{{ route('admin.reservations') }}" class="text-sm text-blue-700 underline">Clear</a>
      @endif
    </form>
  </div>

  <table class="w-full border-collapse border">
    <thead class="bg-gray-100">
      <tr>
        <th class="p-2 text-left">ID</th>
        <th class="text-left">Customer</th>
        <th class="text-left">Status</th>
        <th class="text-left">Bundles</th>
        <th class="text-left">Created</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
    @forelse ($reservations as $r)
      @php
        // Pull raw DB value (ignores any getStatusAttribute accessor that might force "approved")
        $raw = $r->getRawOriginal('status');
        $key = strtolower((string) $raw);

        // Map supported forms (string or numeric enums)
        $map = [
          'pending'  => 'Pending',
          'approved' => 'Approved',
          'declined' => 'Declined',
          '0' => 'Pending',
          '1' => 'Approved',
          '2' => 'Declined',
        ];
  $label = data_get($map, $key, ucfirst((string) $raw));

        $badgeClass = match ($label) {
          'Approved' => 'bg-green-100 text-green-800',
          'Declined' => 'bg-red-100 text-red-800',
          default    => 'bg-amber-100 text-amber-800', // Pending / unknown
        };
      @endphp

{{-- inside your <tbody> loop --}}
<tr class="border-t hover:bg-gray-50">
  <td class="p-2">
    <a href="{{ route('admin.reservations.show', $r) }}" class="text-blue-700 underline">#{{ $r->id }}</a>
  </td>
  <td>{{ optional($r->user)->name ?? '—' }}</td>
  <td>
    <span class="px-2 py-1 rounded text-xs font-semibold {{ $badgeClass }}">{{ $label }}</span>
  </td>
  <td>
    @foreach($r->items as $it)
      <div>{{ $it->menu->name ?? '—' }} × {{ $it->quantity }}</div>
    @endforeach
  </td>
  <td>{{ $r->created_at->format('Y-m-d H:i') }}</td>
  <td class="text-center">
    <a href="{{ route('admin.reservations.show',$r) }}" class="px-2 py-1 border rounded text-sm">View</a>
    @if ($label === 'Pending')
      <form action="{{ route('admin.reservations.approve', $r) }}" method="POST" class="inline ml-1">
        @csrf @method('PATCH')
        <button class="bg-green-600 text-white px-3 py-1 rounded text-sm">Approve</button>
      </form>
      <a href="{{ route('admin.reservations.show',$r) }}#decline"
         class="ml-1 bg-rose-600 text-white px-3 py-1 rounded text-sm">Decline</a>
    @endif
  </td>
</tr>

    @empty
      <tr><td colspan="6" class="text-center text-gray-500 p-4">No reservations found.</td></tr>
    @endforelse
    </tbody>
  </table>

  <div class="mt-4">
    {{ $reservations->links() }} {{-- keeps ?status=... thanks to withQueryString() --}}
  </div>
</div>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\reservations\show.blade.php =====`n{{-- resources/views/admin/reservations/show.blade.php --}}
@extends('layouts.sidebar')
@section('page-title','Reservation #'.$r->id)

@section('content')
<style>[x-cloak]{display:none!important}</style>
<script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>

<div x-data="reservationShow({accepted:@js(session('accepted',false)),declined:@js(session('declined',false))})"
     class="bg-white p-6 rounded shadow w-full">

  <div class="flex items-center justify-between">
    <h1 class="text-2xl font-bold">Reservation #{{ $r->id }}</h1>
    <span class="px-2 py-1 rounded text-sm
      {{ $r->status==='approved' ? 'bg-emerald-100 text-emerald-800' : ($r->status==='declined' ? 'bg-rose-100 text-rose-800' : 'bg-amber-100 text-amber-800') }}">
      {{ ucfirst($r->status) }}
    </span>
  </div>

  <div class="grid md:grid-cols-3 gap-6 mt-6">
    <div class="md:col-span-2 space-y-4">
      <div class="border rounded p-4">
        <h2 class="font-semibold mb-2">Event Details</h2>
        <dl class="grid grid-cols-2 gap-2 text-sm">
          <dt class="text-gray-500">Date(s)</dt>
          <dd>{{ $r->start_date && $r->end_date ? "$r->start_date to $r->end_date" : ($r->event_date ?? '—') }}</dd>

          <dt class="text-gray-500">Days</dt>
          <dd>{{ $r->days ?? '—' }}</dd>

          <dt class="text-gray-500">Attendees</dt>
          <dd>{{ $r->guests ?? $r->attendees ?? '—' }}</dd>

          <dt class="text-gray-500">Location</dt>
          <dd>{{ $r->location ?? '—' }}</dd>
        </dl>
      </div>

      <div class="border rounded p-4">
        <h2 class="font-semibold mb-2">Menus Ordered</h2>
        @forelse($r->items as $it)
          <div class="mb-3 border rounded p-3">
            <div class="flex items-center justify-between">
              <div>
                <div class="font-medium">{{ $it->menu->name ?? '—' }}</div>
                <div class="text-sm text-gray-500">Quantity: {{ $it->quantity }}</div>
              </div>
              <a class="text-blue-600 text-sm" href="{{ route('admin.menus.edit', $it->menu_id) }}">View Bundle</a>
            </div>
            @if(optional($it->menu)->items && $it->menu->items->count())
              <ul class="mt-2 text-sm list-disc ml-5">
                @foreach($it->menu->items as $food)
                  <li>{{ $food->name }} <span class="text-xs text-gray-500">({{ $food->type }})</span></li>
                @endforeach
              </ul>
            @endif
          </div>
        @empty
          <p class="text-gray-500 text-sm">No menus linked.</p>
        @endforelse
      </div>
    </div>

    <div class="space-y-4">
      <div class="border rounded p-4">
        <h2 class="font-semibold mb-2">Customer</h2>
        <dl class="text-sm grid grid-cols-3 gap-2">
          <dt class="text-gray-500 col-span-1">Name</dt>
          <dd class="col-span-2">{{ optional($r->user)->name ?? $r->customer_name ?? '—' }}</dd>

          <dt class="text-gray-500 col-span-1">Email</dt>
          <dd class="col-span-2">{{ optional($r->user)->email ?? $r->email ?? '—' }}</dd>

          <dt class="text-gray-500 col-span-1">Phone</dt>
          <dd class="col-span-2">{{ optional($r->user)->phone ?? $r->contact_number ?? '—' }}</dd>
        </dl>
      </div>

      @if($r->status !== 'approved' && $r->status !== 'declined')
      <div class="border rounded p-4" id="decline">
        <h2 class="font-semibold mb-3">Actions</h2>

        <form method="POST" action="{{ route('admin.reservations.approve', $r) }}" class="mb-2">
          @csrf @method('PATCH')
          <button class="w-full bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded">
            Accept Reservation
          </button>
        </form>

        <button type="button" @click="openDecline()" class="w-full bg-rose-600 hover:bg-rose-700 text-white px-4 py-2 rounded">
          Decline Reservation
        </button>
      </div>
      @endif

      @if($r->status === 'declined' && !empty($r->decline_reason))
      <div class="border rounded p-4">
        <h2 class="font-semibold mb-2">Decline Reason</h2>
        <p class="text-sm text-gray-700">{{ $r->decline_reason }}</p>
      </div>
      @endif
    </div>
  </div>

  {{-- Accepted popup --}}
  <div x-cloak x-show="acceptedOpen" x-transition
       class="fixed inset-0 z-50 flex items-center justify-center">
    <div @click="acceptedOpen=false" class="absolute inset-0 bg-black/40"></div>
    <div class="relative bg-white rounded-xl shadow-lg p-6 w-full max-w-sm text-center">
      <h3 class="text-lg font-semibold mb-2">Reservation Accepted</h3>
      <p class="text-sm text-gray-600">Inventory was updated and the customer was notified.</p>
      <button class="mt-4 px-4 py-2 bg-emerald-600 text-white rounded" @click="acceptedOpen=false">OK</button>
    </div>
  </div>

  {{-- Decline modal --}}
  <div x-cloak x-show="declineOpen" x-transition
       class="fixed inset-0 z-50 flex items-center justify-center">
    <div @click="declineOpen=false" class="absolute inset-0 bg-black/40"></div>
    <div class="relative bg-white rounded-xl shadow-lg p-6 w-full max-w-lg">
      <button class="absolute top-2 right-3 text-gray-500 hover:text-black" @click="declineOpen=false">✕</button>
      <h3 class="text-lg font-semibold mb-3">Decline Reservation</h3>
      <p class="text-sm text-gray-600 mb-3">Please provide a reason. The customer will receive this via email and SMS.</p>

      <form method="POST" action="{{ route('admin.reservations.decline', $r) }}" class="space-y-3">
        @csrf @method('PATCH')
        <textarea name="reason" rows="4" required class="w-full border rounded p-2" placeholder="Reason for declining..."></textarea>
        @error('reason') <p class="text-sm text-rose-600">{{ $message }}</p> @enderror

        <div class="flex justify-end gap-2">
          <button type="button" class="px-4 py-2 bg-gray-200 rounded" @click="declineOpen=false">Cancel</button>
          <button class="px-4 py-2 bg-rose-600 text-white rounded">Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('reservationShow', (opts) => ({
      acceptedOpen: false,
      declineOpen: false,
      openDecline(){ this.declineOpen = true; },
      init(){
        if (opts.accepted) this.acceptedOpen = true;
      }
    }));
  });
</script>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\calendar.blade.php =====`n@extends('layouts.sidebar')
@section('page-title', 'Calendars')

@section('content')
<div class="bg-white p-6 rounded shadow">

    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">Calendar</h1>

        <!-- Month Picker -->
        <form method="GET" action="{{ route('admin.calendar') }}">
            <input type="month" name="month" value="{{ $month }}"
                   class="border rounded px-2 py-1 cursor-pointer"
                   onchange="this.form.submit()">
        </form>
    </div>

    <div class="grid grid-cols-3 gap-6">
        <!-- Sidebar List of ALL Approved Events -->
        <div>
            <h2 class="font-bold mb-3">List of Events</h2>
            <ul class="space-y-2">
                @forelse($allApproved as $event)
                    <li class="border p-2 rounded bg-green-100">
                        <strong>{{ $event->user->name }}</strong>  
                        <div>{{ \Carbon\Carbon::parse($event->date)->format('M d, Y') }} - {{ $event->guests }} guests</div>
                    </li>
                @empty
                    <li class="text-gray-500">No approved reservations yet.</li>
                @endforelse
            </ul>
        </div>

        <!-- Calendar Grid -->
        <div class="col-span-2">
            <div class="bg-red-600 text-white px-4 py-2 font-bold">
                {{ \Carbon\Carbon::parse($month . '-01')->format('F Y') }}
            </div>

            @php
                $monthStart = \Carbon\Carbon::parse($month . '-01')->startOfMonth();
                $daysInMonth = $monthStart->daysInMonth;
                $startDay = $monthStart->dayOfWeek;
            @endphp

            <div class="grid grid-cols-7 border-t border-l">
                <!-- Weekday headers -->
                @foreach(['Sun','Mon','Tue','Wed','Thu','Fri','Sat'] as $day)
                    <div class="border-r border-b p-2 font-bold text-center bg-gray-100">{{ $day }}</div>
                @endforeach

                <!-- Empty slots before first day -->
                @for($i = 0; $i < $startDay; $i++)
                    <div class="border-r border-b p-4"></div>
                @endfor

                <!-- Days with events -->
                @for($d = 1; $d <= $daysInMonth; $d++)
                    @php
                        $currentDate = \Carbon\Carbon::parse($month . '-' . str_pad($d, 2, '0', STR_PAD_LEFT));
                        $eventsForDay = $monthlyApproved->filter(fn($res) => \Carbon\Carbon::parse($res->date)->isSameDay($currentDate));
                    @endphp
                    <div class="border-r border-b p-2 h-24 relative">
                        <div class="font-bold">{{ $d }}</div>
                        @foreach($eventsForDay as $ev)
                            <div class="bg-green-500 text-white text-xs rounded px-1 mt-1 truncate">
                                {{ $ev->user->name }} ({{ $ev->guests }} guests)
                            </div>
                        @endforeach
                    </div>
                @endfor
            </div>
        </div>
    </div>
</div>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\admin\dashboard.blade.php =====`n@extends('layouts.sidebar')
@section('page-title', 'Admin')

@section('content')
<div class="bg-white p-6 rounded shadow">
    <!-- Greeting -->
    <h1 class="text-2xl font-bold mb-2">Hello <span class="text-green-600">{{ Auth::user()->name }}</span>,</h1>
    <p class="text-gray-600 mb-6">Have a good day :)</p>

    <!-- Top Stats -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div class="bg-green-600 text-white p-4 rounded shadow text-center">
            <h2 class="text-lg font-semibold">Total Reservations</h2>
            <p class="text-2xl font-bold mt-2">{{ $totalReservations }}</p>
        </div>
        <div class="bg-yellow-500 text-white p-4 rounded shadow text-center">
            <h2 class="text-lg font-semibold">Pending Reservations</h2>
            <p class="text-2xl font-bold mt-2">{{ $pendingReservations }}</p>
        </div>
        <div class="bg-orange-500 text-white p-4 rounded shadow text-center">
            <h2 class="text-lg font-semibold">Menus Sold</h2>
            <p class="text-2xl font-bold mt-2">{{ $menusSold }}</p>
        </div>
    </div>

    <!-- Inventory Section -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <!-- Low Stocks -->
        <div class="bg-yellow-200 rounded shadow">
            <h2 class="bg-yellow-400 p-3 font-bold rounded-t">Low Stocks Items</h2>
            <ul class="divide-y divide-gray-300">
                @forelse($lowStocks as $item)
                <li class="flex justify-between p-3"><span>{{ $item->name }}</span><span class="bg-red-500 text-white px-2 py-1 text-xs rounded">{{ $item->qty }} {{ $item->unit }}</span></li>
                @empty
                <li class="p-3">No low stock items</li>
                @endforelse
            </ul>
            <div class="p-3 text-right">
                <a href="#" class="text-blue-600 hover:underline">See More</a>
            </div>
        </div>

        <!-- Out of Stocks -->
        <div class="bg-red-200 rounded shadow">
            <h2 class="bg-red-500 text-white p-3 font-bold rounded-t">Out of Stocks Items</h2>
            <ul class="divide-y divide-gray-300">
                @forelse($outOfStocks as $item)
                <li class="p-3">{{ $item->name }}</li>
                @empty
                <li class="p-3">No out of stock items</li>
                @endforelse
            </ul>
        </div>
    </div>

    <!-- Expiring Soon -->
    <div class="bg-white shadow rounded">
        <h2 class="bg-red-500 text-white p-3 font-bold rounded-t">⚠️ Expiring Soon</h2>
        <table class="w-full text-left border-collapse">
            <thead class="bg-gray-100">
                <tr>
                    <th class="p-3 border">Items</th>
                    <th class="p-3 border">Quantity</th>
                    <th class="p-3 border">Expiry Date</th>
                    <th class="p-3 border">Days Left</th>
                </tr>
            </thead>
            <tbody>
                @forelse($expiringSoon as $item)
                <tr>
                    <td class="p-3 border">{{ $item->name }}</td>
                    <td class="p-3 border">{{ $item->qty }} {{ $item->unit }}</td>
                    <td class="p-3 border">{{ $item->expiry_date }}</td>
                    <td class="p-3 border text-red-600 font-bold">{{ (int) \Carbon\Carbon::now()->diffInDays(\Carbon\Carbon::parse($item->expiry_date)) }}</td>
                </tr>
                @empty
                <tr>
                    <td colspan="4" class="p-3 border text-center">No items expiring soon</td>
                </tr>
                @endforelse
            </tbody>
        </table>
    </div>
</div>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\auth\confirm-password.blade.php =====`n<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
    </div>

    <form method="POST" action="{{ route('password.confirm') }}">
        @csrf

        <!-- Password -->
        <div>
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="flex justify-end mt-4">
            <x-primary-button>
                {{ __('Confirm') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\auth\forgot-password.blade.php =====`n<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
    </div>

    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('password.email') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Email Password Reset Link') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\auth\login.blade.php =====`n<x-guest-layout>
    <div class="min-h-screen flex items-center justify-center bg-gray-800">
        <div class="bg-white rounded-lg shadow-lg flex overflow-hidden w-full max-w-4xl">
            
            <!-- Left side (Logo) -->
            <div class="w-1/2 flex items-center justify-center">
                <img src="{{ asset('images/caf-logo.png') }}" alt="RET Cafeteria"
                     class="max-h-64 object-contain">
            </div>

            <!-- Right side (Login Form) -->
            <div class="w-1/2 p-10 bg-gray-200">
                <h2 class="text-2xl font-bold text-center mb-6">Login</h2>

                <x-auth-session-status class="mb-4" :status="session('status')" />

                <form method="POST" action="{{ route('login') }}">
                    @csrf
                    <!-- Email -->
                    <div>
                        <x-input-label for="email" :value="__('Email')" />
                        <x-text-input id="email" type="email" name="email"
                            class="block mt-1 w-full border-gray-400"
                            :value="old('email')" required autofocus autocomplete="username" />
                        <x-input-error :messages="$errors->get('email')" class="mt-2" />
                    </div>

                    <!-- Password -->
                    <div class="mt-4">
                        <x-input-label for="password" :value="__('Password')" />
                        <x-text-input id="password" type="password" name="password"
                            class="block mt-1 w-full border-gray-400"
                            required autocomplete="current-password" />
                        <x-input-error :messages="$errors->get('password')" class="mt-2" />
                    </div>

                    <!-- Forgot + Register -->
                    <div class="flex justify-between text-sm text-gray-600 mt-4">
                        @if (Route::has('password.request'))
                            <a href="{{ route('password.request') }}" class="hover:underline">
                                {{ __('Forgot Password?') }}
                            </a>
                        @endif
                        <a href="{{ route('register') }}" class="hover:underline">
                            {{ __("Don't have an Account?") }}
                        </a>
                    </div>

                    <!-- Login Button -->
                    <div class="mt-6">
                        <button type="submit"
                            class="w-full bg-gray-800 text-white py-2 rounded hover:bg-gray-900">
                            {{ __('Login') }}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-guest-layout>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\auth\register.blade.php =====`n<x-guest-layout>
    <div class="min-h-screen flex items-center justify-center bg-gray-800">
        <div class="bg-white rounded-lg shadow-lg flex overflow-hidden w-full max-w-4xl">
            
            <!-- Left Logo -->
            <div class="w-1/2 flex items-center justify-center">
                <img src="{{ asset('images/caf-logo.png') }}" alt="RET Cafeteria"
                     class="max-h-64 object-contain">
            </div>

            <!-- Right Form -->
            <div class="w-1/2 p-10 bg-gray-200">
                <h2 class="text-2xl font-bold text-center mb-6">Register</h2>

                <form method="POST" action="{{ route('register') }}">
                    @csrf

                    <!-- Name -->
                    <div>
                        <x-input-label for="name" :value="__('Name')" />
                        <x-text-input id="name" name="name" type="text"
                            class="block mt-1 w-full border-gray-400" required autofocus />
                    </div>

                    <!-- Address -->
                    <div class="mt-4">
                        <x-input-label for="address" :value="__('Address')" />
                        <x-text-input id="address" name="address" type="text"
                            class="block mt-1 w-full border-gray-400" />
                    </div>

                    <!-- Email + Contact -->
                    <div class="mt-4 grid grid-cols-2 gap-4">
                        <div>
                            <x-input-label for="email" :value="__('Email')" />
                            <x-text-input id="email" name="email" type="email"
                                class="block mt-1 w-full border-gray-400" required />
                        </div>
                        <div>
                            <x-input-label for="contact_no" :value="__('Contact No')" />
                            <x-text-input id="contact_no" name="contact_no" type="text"
                                class="block mt-1 w-full border-gray-400" />
                        </div>
                    </div>

                    <!-- Department -->
                    <div class="mt-4">
                        <x-input-label for="department" :value="__('Department/Office')" />
                        <x-text-input id="department" name="department" type="text"
                            class="block mt-1 w-full border-gray-400" />
                    </div>

                    <!-- Password -->
                    <div class="mt-4">
                        <x-input-label for="password" :value="__('Password')" />
                        <x-text-input id="password" name="password" type="password"
                            class="block mt-1 w-full border-gray-400" required />
                    </div>

                    <!-- Confirm Password -->
                    <div class="mt-4">
                        <x-input-label for="password_confirmation" :value="__('Confirm Password')" />
                        <x-text-input id="password_confirmation" name="password_confirmation" type="password"
                            class="block mt-1 w-full border-gray-400" required />
                    </div>

                    <!-- Already have account -->
                    <div class="flex justify-between text-sm text-gray-600 mt-4">
                        <a href="{{ route('login') }}" class="hover:underline">
                            {{ __('Have an account already?') }}
                        </a>
                    </div>

                    <!-- Register Button -->
                    <div class="mt-6">
                        <button type="submit"
                            class="w-full bg-gray-800 text-white py-2 rounded hover:bg-gray-900">
                            {{ __('Register') }}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-guest-layout>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\auth\reset-password.blade.php =====`n<x-guest-layout>
    <form method="POST" action="{{ route('password.store') }}">
        @csrf

        <!-- Password Reset Token -->
        <input type="hidden" name="token" value="{{ $request->route('token') }}">

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $request->email)" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                type="password"
                                name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Reset Password') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\auth\verify-email.blade.php =====`n<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>

    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif

    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf

            <div>
                <x-primary-button>
                    {{ __('Resend Verification Email') }}
                </x-primary-button>
            </div>
        </form>

        <form method="POST" action="{{ route('logout') }}">
            @csrf

            <button type="submit" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {{ __('Log Out') }}
            </button>
        </form>
    </div>
</x-guest-layout>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\application-logo.blade.php =====`n<img src="{{ asset('images/caf-logo.png') }}" alt="Smart Cafeteria Logo">
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\auth-session-status.blade.php =====`n@props(['status'])

@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600']) }}>
        {{ $status }}
    </div>
@endif
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\danger-button.blade.php =====`n<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\dropdown-link.blade.php =====`n<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\dropdown.blade.php =====`n@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])

@php
$alignmentClasses = match ($align) {
    'left' => 'ltr:origin-top-left rtl:origin-top-right start-0',
    'top' => 'origin-top',
    default => 'ltr:origin-top-right rtl:origin-top-left end-0',
};

$width = match ($width) {
    '48' => 'w-48',
    default => $width,
};
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}"
            style="display: none;"
            @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\input-error.blade.php =====`n@props(['messages'])

@if ($messages)
    <ul {{ $attributes->merge(['class' => 'text-sm text-red-600 space-y-1']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\input-label.blade.php =====`n@props(['value'])

<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700']) }}>
    {{ $value ?? $slot }}
</label>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\modal.blade.php =====`n@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])

@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp

<div
    x-data="{
        show: @js($show),
        focusables() {
            // All focusable element types...
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                // All non-disabled elements...
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail == '{{ $name }}' ? show = true : null"
    x-on:close-modal.window="$event.detail == '{{ $name }}' ? show = false : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <div
        x-show="show"
        class="mb-6 bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
    >
        {{ $slot }}
    </div>
</div>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\nav-link.blade.php =====`n@props(['active'])

@php
$classes = ($active ?? false)
            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 text-sm font-medium leading-5 text-gray-900 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\primary-button.blade.php =====`n<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 focus:bg-gray-700 active:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\responsive-nav-link.blade.php =====`n@props(['active'])

@php
$classes = ($active ?? false)
            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 text-start text-base font-medium text-indigo-700 bg-indigo-50 focus:outline-none focus:text-indigo-800 focus:bg-indigo-100 focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-50 hover:border-gray-300 focus:outline-none focus:text-gray-800 focus:bg-gray-50 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\secondary-button.blade.php =====`n<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-25 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\components\text-input.blade.php =====`n@props(['disabled' => false])

<input @disabled($disabled) {{ $attributes->merge(['class' => 'border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm']) }}>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\customer\home.blade.php =====`n

@extends('layouts.sidebar') {{-- Use your sidebar layout --}}

@section('content')
<div class="bg-white rounded shadow p-6">
    <h1 class="text-2xl font-bold mb-4">Available Menus</h1>

    <div class="grid sm:grid-cols-2 gap-4">
        @forelse ($menus as $menu)
            <div class="border rounded p-4">
                <h2 class="font-semibold">{{ $menu->name }}</h2>
                <p class="text-sm text-gray-600">{{ $menu->description ?? 'No description' }}</p>
                <p class="mt-1 font-bold">₱{{ $menu->price }}</p>
                <p class="text-sm">Meal Time: {{ ucfirst($menu->meal_time) }}</p>
                <p class="text-sm">Items: {{ $menu->items->pluck('name')->join(', ') }}</p>
            </div>
        @empty
            <p>No menus available.</p>
        @endforelse
    </div>

    <h2 class="text-xl font-bold mt-8">Make a Reservation</h2>
    <form method="POST" action="{{ route('reservations.store') }}" class="mt-4 grid gap-3 max-w-md">
        @csrf
        <label class="block">
            <span class="text-sm">Select Menu</span>
            <select name="menu_id" required class="mt-1 w-full border rounded p-2">
                <option value="">Choose a menu</option>
                @foreach ($menus as $menu)
                    <option value="{{ $menu->id }}">{{ $menu->name }} - ₱{{ $menu->price }}</option>
                @endforeach
            </select>
        </label>
        <label class="block">
            <span class="text-sm">Quantity</span>
            <input type="number" name="quantity" min="1" required class="mt-1 w-full border rounded p-2">
        </label>
        <label class="block">
            <span class="text-sm">Date</span>
            <input type="date" name="date" required class="mt-1 w-full border rounded p-2">
        </label>
        <label class="block">
            <span class="text-sm">Time</span>
            <input type="time" name="time" required class="mt-1 w-full border rounded p-2">
        </label>
        <label class="block">
            <span class="text-sm">Number of Guests</span>
            <input type="number" name="guests" min="1" required class="mt-1 w-full border rounded p-2">
        </label>
        <button class="bg-blue-600 text-white px-4 py-2 rounded w-fit">Reserve</button>
    </form>
</div>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\customer\homepage.blade.php =====`n<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>RET Cafeteria - CLSU</title>

    <!-- Tailwind CSS script, including custom configuration -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'clsu-green': '#00462E',
                        'ret-green-light': '#057C3C',
                        'cafeteria-orange': '#FB3E05',
                        'ret-dark': '#1F2937',
                        'menu-orange': '#EA580C',
                        'menu-dark': '#131820',
                    },
                    fontFamily: {
                        fugaz: ['"Fugaz One"', 'sans-serif'],
                        damion: ['"Damion"', 'cursive'],
                        poppins: ['"Poppins"', 'sans-serif'],
                    }
                }
            }
        }
    </script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Fugaz+One&family=Damion&display=swap" rel="stylesheet" />
</head>
<body class="font-poppins bg-gray-200">

    <!-- Header Section -->
    <header class="bg-white shadow-sm sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex justify-between items-center h-16">
            <div class="flex items-center space-x-4">
            <img src="{{ asset('images/Ret Cafeteria Logo.png') }}" alt="RET Cafeteria Logo" class="h-12 w-auto" />
            </div>

            <nav class="hidden md:flex space-x-8 text-ret-dark font-poppins font-medium">
                <a href="#home" class="hover:text-ret-green-light">Home</a>
                <a href="#about" class="text-gray-600 hover:text-ret-green-light">About</a>
                <a href="#menu" class="text-gray-600 hover:text-ret-green-light">Menu</a>
                <a href="#contact" class="text-gray-600 hover:text-ret-green-light">Contact Us</a>
                <a href="#reservation" class="text-gray-600 hover:text-ret-green-light flex items-center">
                    Reservation
                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </a>
            </nav>

            <div class="flex items-center space-x-4 text-sm text-gray-600 font-poppins">
                <span>Hi, Name</span>
                <div class="relative">
                    <img src="https://placehold.co/24x24/CCCCCC/333333?text=N" alt="Notifications" class="w-6 h-6" />
                </div>
                <div class="w-8 h-8 bg-gray-600 rounded-full text-white flex items-center justify-center font-medium">
                    <img src="images/clsu-logo.png" alt="Notifications" class="w-6 h-6" />
                </div>
            </div>
        </div>
    </header>

        <!-- Hero Section -->
    <section id="home" class="relative py-20 bg-white text-black">
        <div class="relative z-20 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex flex-col-reverse lg:flex-row gap-10 items-center">
            <div class="flex-2 text-center">
                <h1 class="text-5xl md:text-7xl font-bold mb-8 leading-tight">
                    <span class="text-clsu-green font-fugaz text-8xl">CLSU</span>
                    <span class="text-ret-green-light font-fugaz text-8xl"> RET</span>
                    <br>
                    <span class="text-cafeteria-orange font-damion text-9xl">Cafeteria</span>
                </h1>
                <p class="text-2xl mb-8 font-poppins italic opacity-80">Official Food Caterer of the University. Also offers food catering services for special occasions.</p>
                <p class="text-base mb-8 font-poppins italic opacity-70">Your meal, your way—fast, fresh, and convenient. Book Now!</p>
                <button class="bg-clsu-green px-8 py-3 rounded-lg font-poppins font-semibold text-white text-base hover:bg-green-700 transition duration-300">
                    Reserve Now
                </button>
            </div>

            <div class="flex-1 relative flex justify-center lg:justify-end">
                <div class="relative w-96 h-96">
                    <img src="https://placehold.co/384x384/0000FF/FFFFFF?text=Blue+Curve" alt="Blue curve" class="absolute inset-0 w-full h-full object-contain -z-10" />
                    <img src="https://placehold.co/384x384/FF0000/FFFFFF?text=Food+Plate" alt="Food plate" class="absolute inset-0 w-full h-full object-contain" />
                </div>
            </div>
        </div>
    </section>
    
    <!-- About Us Section -->
    <section id="about" class="py-20 bg-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <div class="bg-ret-dark text-white p-8 rounded-lg shadow-lg font-poppins">
                <h2 class="text-4xl font-bold mb-4">About us</h2>
                <h3 class="text-4xl font-bold mb-6">CLSU RET Cafeteria</h3>
                <p class="text-base mb-6">At CLSU RET Cafeteria, we take pride in serving fresh, delicious, and high-quality meals to the CLSU community...</p>
                <p class="text-base mb-8">Beyond daily meals, we also offer professional catering services for special occasions...</p>
                <button class="bg-clsu-green px-6 py-3 rounded-lg font-semibold text-white text-base hover:bg-green-700 transition duration-300">
                    See more
                </button>
            </div>

            <div class="flex justify-center">
                <img src="https://placehold.co/320x320/000000/FFFFFF?text=Building" alt="Cafeteria Building" class="w-80 h-80 object-contain" />
            </div>
        </div>
    </section>

    <!-- Menus Section -->
    <section id="menu" class="py-20 bg-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 font-poppins text-center mb-16">
            <h2 class="text-4xl font-bold text-ret-dark mb-4">Menus</h2>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-0">
            <!-- Vegetable & Salads -->
            <div class="bg-ret-dark text-white overflow-hidden shadow-lg aspect-square">
                <img src="images/breakfast.png" alt="Vegetables & Salads" class="h-48 w-full object-cover" />
                <div class="p-6">
                    <h3 class="text-4xl font-bold mb-2">Vegetables & Salads</h3>
                    <p class="text-base text-gray-300">Fresh vegetables and fruits.</p>
                </div>
            </div>

            <!-- Sandwiches & Snacks -->
            <div class="bg-ret-green-light text-white overflow-hidden shadow-lg aspect-square">
                <img src="images/Sandwich.png" alt="Sandwiches & Snacks" class="h-48 w-full object-cover" />
                <div class="p-6">
                    <h3 class="text-4xl font-bold mb-2">Sandwiches & Snacks</h3>
                    <p class="text-base text-gray-300">Ideal for in-between meals.</p>
                </div>
            </div>

            <!-- Rice Meals & Main Courses -->
            <div class="bg-cafeteria-orange text-white overflow-hidden shadow-lg aspect-square">
                <img src="images/Adobo.png" alt="Rice Meals & Main Courses" class="h-48 w-full object-cover" />
                <div class="p-6">
                    <h3 class="text-4xl font-bold mb-2">Rice Meals & Main Courses</h3>
                    <p class="text-base text-gray-300">Served with rice, featuring Filipino specialty.</p>
                </div>
            </div>

            <!-- Desserts & Beverages -->
            <div class="bg-clsu-green text-white overflow-hidden shadow-lg aspect-square">
                <img src="images/Juice.png" alt="Desserts & Beverages" class="h-48 w-full object-cover" />
                <div class="p-6">
                    <h3 class="text-4xl font-bold mb-2">Desserts & Beverages</h3>
                    <p class="text-base text-gray-300">Sweet treats and variety of drinks.</p>
                </div>
            </div>

            <!-- Soups & Side Dishes -->
            <div class="bg-menu-orange text-white overflow-hidden shadow-lg aspect-square">
                <img src="images/tinola.webp" alt="Soups & Side Dishes" class="h-48 w-full object-cover" />
                <div class="p-6">
                    <h3 class="text-4xl font-bold mb-2">Soups & Side Dishes</h3>
                    <p class="text-base text-gray-300">Warm and flavorful broths.</p>
                </div>
            </div>

            <!-- And Much More -->
            <div class="bg-menu-dark text-white overflow-hidden shadow-lg flex flex-col items-center justify-center p-6 aspect-square">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-16 h-16 mb-4 text-white">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25L21 12m0 0l-3.75 3.75M21 12H3" />
                </svg>
                <h3 class="text-4xl font-bold mb-2">And Much More</h3>
            </div>
        </div>
    </section>

    <!-- Best Seller Section -->
    <section class="py-20 bg-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center mb-16 font-poppins">
            <h2 class="text-4xl font-bold text-ret-dark mb-4">Best Seller</h2>
            <p class="text-xl text-gray-600">Most-Ordered Meals</p>
        </div>

        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-2 gap-8 font-poppins">
            <div class="bg-ret-dark text-white rounded-lg p-8 shadow-lg">
                <h3 class="text-4xl font-bold mb-2">Standard Menu</h3>
                <p class="text-base text-gray-300 mb-4">Breakfast</p>
                <h4 class="text-3xl font-bold text-cafeteria-orange mb-6">Menu 1</h4>
                <ul class="space-y-2 text-gray-300 list-disc list-inside marker:text-cafeteria-orange">
                    <li>Longanisa with Slice Tomato</li>
                    <li>Fried Egg Sunny Side Up</li>
                    <li>Rice</li>
                    <li>Tea/Coffee</li>
                    <li>Bottled Water</li>
                </ul>
            </div>

            <div class="bg-ret-dark text-white rounded-lg p-8 shadow-lg">
                <h3 class="text-4xl font-bold mb-2">Special Menu</h3>
                <p class="text-base text-gray-300 mb-4">Lunch</p>
                <h4 class="text-3xl font-bold text-cafeteria-orange mb-6">Menu 3</h4>
                <ul class="space-y-2 text-gray-300 list-disc list-inside marker:text-cafeteria-orange">
                    <li>Sinigang na Hipon</li>
                    <li>Fried Chicken</li>
                    <li>Gising-gising</li>
                    <li>Sliced Fruits</li>
                    <li>Rice</li>
                    <li>Bottled Water</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- Reserve Your Spot Section -->
    <section id="reservation" class="py-20 bg-black relative overflow-hidden text-center text-white">
        <div class="absolute inset-0 opacity-20" style="background-image: url('https://placehold.co/1920x1080/000000/FFFFFF?text=Spices+Background');"></div>
        
        <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 font-poppins">
            <h2 class="text-4xl font-bold mb-6">Reserve Your Spot at RET Cafeteria</h2>
            <p class="text-xl mb-8">Don't miss out. Reserve ahead and roll up when it's time to eat.</p>
            <button class="bg-clsu-green px-8 py-3 rounded-lg font-semibold text-white text-base hover:bg-green-700 transition duration-300">
                Reserve Now
            </button>
        </div>
    </section>

    <!-- Customer Support Section -->
    <section id="contact" class="py-16 bg-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center font-poppins">
            <h2 class="text-4xl font-bold text-ret-dark mb-4">Customer Support</h2>
            <p class="text-xl text-gray-600 mb-12">Have a question? We're here to help!</p>

            <div class="flex flex-col lg:flex-row items-center justify-between space-y-8 lg:space-y-0 lg:space-x-8">
                <div class="bg-white border border-gray-200 rounded-lg p-8 shadow-lg w-full lg:w-1/2">
                    <div class="flex items-center mb-4 relative">
                        <div class="w-12 h-12 bg-yellow-400 rounded-full flex items-center justify-center">
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                            </svg>
                        </div>
                    </div>
                    <h3 class="text-xl font-bold text-ret-dark mb-2">Contact Us →</h3>
                    <p class="text-gray-600">Reach out to our team for any additional queries</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer Section -->
    <footer class="bg-ret-dark text-white py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-3 gap-8 font-poppins">
            <div>
                <h3 class="text-xl font-bold mb-4">Information</h3>
                <p class="text-gray-300">RET Blgd. CLSU, Muñoz, Nueva Ecija, Philippines</p>
                <p class="text-gray-300">Call us now: 0927 719 7639</p>
                <p class="text-gray-300">Email: RETCafeteria@clsu2.edu.ph</p>
            </div>

            <div class="text-center">
                <div class="flex items-center justify-center space-x-2 mb-4">
                    <div>
                        <span class="text-clsu-green font-fugaz text-6xl">CLSU</span>
                        <span class="text-ret-green-light font-fugaz text-6xl"> RET</span>
                        <span class="text-cafeteria-orange font-damion text-6xl italic"> Cafeteria</span>
                    </div>
                </div>
                <div class="flex items-center justify-center space-x-2 text-gray-300 text-sm mb-2">
                    <span>🍴</span>
                    <span>SINCE 1995</span>
                    <span>🥄</span>
                </div>
            </div>

            <div>
                <h3 class="text-xl font-bold mb-4">Socials</h3>
                <div class="flex items-center space-x-2">
                    <img src="https://placehold.co/24x24/000000/FFFFFF?text=T" alt="Twitter" class="w-6 h-6 text-blue-400" />
                    <a href="#" class="text-gray-300 hover:text-white">CLSU RET Cafeteria</a>
                </div>
            </div>
        </div>

        <div class="border-t border-gray-600 mt-8 pt-8 text-center text-gray-300 text-sm">
            &copy;2025 All Rights Copyright CLSU RET Cafeteria. Design & Developed By BSIT.
        </div>
    </footer>

    <!-- JavaScript for smooth scrolling -->
    <script>
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if(target) {
                    target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            });
        });
    </script>
</body>
</html>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\layouts\app.blade.php =====`n<!DOCTYPE html>
<html lang="{{ str_replace('_','-',app()->getLocale()) }}">
<head>
    <script src="//unpkg.com/alpinejs" defer></script>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{{ config('app.name', 'Smart Cafeteria') }}</title>
    @vite(['resources/css/app.css','resources/js/app.js'])
</head>
<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100">
        <main class="p-6">
            @yield('content') {{-- <== important --}}
        </main>
    </div>
</body>
</html>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\layouts\guest.blade.php =====`n<!DOCTYPE html>
<html lang="{{ str_replace('_','-',app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{{ config('app.name', 'Smart Cafeteria') }}</title>
    @vite(['resources/css/app.css','resources/js/app.js'])
</head>
<body class="font-sans text-gray-900 antialiased">
    {{ $slot }}
</body>
</html>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\layouts\navigation.blade.php =====`n<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            {{-- Left: logo + links --}}
            <div class="flex items-center gap-6">
                @if(Auth::user()->role === 'superadmin')
                    <a href="{{ route('superadmin.users') }}"><x-application-logo class="block h-9 w-auto" /></a>
                @elseif(Auth::user()->role === 'admin')
                    <a href="{{ route('admin.dashboard') }}"><x-application-logo class="block h-9 w-auto" /></a>
                @else
                    <a href="{{ route('customer.home') }}"><x-application-logo class="block h-9 w-auto" /></a>
                @endif

                <div class="hidden sm:flex space-x-8">
                    @if(Auth::user()->role === 'superadmin')
                        <x-nav-link :href="route('superadmin.users')" :active="request()->routeIs('superadmin.users')">Manage Users</x-nav-link>
                    @elseif(Auth::user()->role === 'admin')
                        <x-nav-link :href="route('admin.dashboard')" :active="request()->routeIs('admin.dashboard')">Dashboard</x-nav-link>
                    @else
                        <x-nav-link :href="route('customer.home')" :active="request()->routeIs('customer.home')">Home</x-nav-link>
                    @endif
                </div>
            </div>

            {{-- Right: user dropdown --}}
            <div class="hidden sm:flex sm:items-center sm:ms-6">
                <x-dropdown align="right" width="48">
                    <x-slot name="trigger">
                        <button class="inline-flex items-center px-3 py-2 text-sm rounded-md text-gray-500 hover:text-gray-700">
                            <div>{{ Auth::user()->name }}</div>
                            <div class="ms-1"><svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/></svg></div>
                        </button>
                    </x-slot>
                    <x-slot name="content">
                        <x-dropdown-link :href="route('profile.edit')">Profile</x-dropdown-link>
                        <form method="POST" action="{{ route('logout') }}">
                            @csrf
                            <x-dropdown-link :href="route('logout')" onclick="event.preventDefault(); this.closest('form').submit();">Log Out</x-dropdown-link>
                        </form>
                    </x-slot>
                </x-dropdown>
            </div>

            {{-- Mobile hamburger --}}
            <div class="-me-2 flex items-center sm:hidden">
                <button @click="open=!open" class="p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path :class="{'hidden': open,'inline-flex':!open}" class="inline-flex" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                        <path :class="{'hidden': !open,'inline-flex':open}" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    {{-- Mobile menu --}}
    <div :class="{'block':open,'hidden':!open}" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            @if(Auth::user()->role === 'superadmin')
                <x-responsive-nav-link :href="route('superadmin.users')" :active="request()->routeIs('superadmin.users')">Manage Users</x-responsive-nav-link>
            @elseif(Auth::user()->role === 'admin')
                <x-responsive-nav-link :href="route('admin.dashboard')" :active="request()->routeIs('admin.dashboard')">Dashboard</x-responsive-nav-link>
            @else
                <x-responsive-nav-link :href="route('customer.home')" :active="request()->routeIs('customer.home')">Home</x-responsive-nav-link>
            @endif
        </div>
        <div class="pt-4 pb-1 border-t border-gray-200">
            <div class="px-4">
                <div class="font-medium text-base text-gray-800">{{ Auth::user()->name }}</div>
                <div class="font-medium text-sm text-gray-500">{{ Auth::user()->email }}</div>
            </div>
            <div class="mt-3 space-y-1">
                <x-responsive-nav-link :href="route('profile.edit')">Profile</x-responsive-nav-link>
                <form method="POST" action="{{ route('logout') }}"> @csrf
                    <x-responsive-nav-link :href="route('logout')" onclick="event.preventDefault(); this.closest('form').submit();">Log Out</x-responsive-nav-link>
                </form>
            </div>
        </div>
    </div>
</nav>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\layouts\sidebar.blade.php =====`n<!DOCTYPE html>
<html lang="{{ str_replace('_','-',app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Smart Cafeteria') }}</title>

    @vite(['resources/css/app.css', 'resources/js/app.js'])
    <script src="//unpkg.com/alpinejs" defer></script>
</head>
<body class="font-sans antialiased"
      x-data="{ openSidebar: false, confirmLogout: false }">

<div class="min-h-screen flex">

    <!-- Sidebar -->
    <aside class="bg-gray-900 text-white w-64 fixed inset-y-0 left-0 z-40 transform md:translate-x-0 transition-transform duration-200"
           :class="openSidebar ? 'translate-x-0' : '-translate-x-full md:translate-x-0'">

        <!-- Logo -->
        <div class="p-4 text-2xl font-bold border-b border-gray-700">
            <img src="{{ asset('images/caf-logo.png') }}" alt="Logo" class="h-12 mx-auto">
        </div>

        <!-- Menu -->
        <nav class="p-4 space-y-2">
            @if(Auth::user()->role === 'superadmin')
                <a href="{{ route('superadmin.users') }}"
                   class="block px-3 py-2 rounded hover:bg-gray-700 {{ request()->routeIs('superadmin.users') ? 'bg-green-600' : '' }}">
                    👥 Manage Users
                </a>
            @endif

            @if(Auth::user()->role === 'admin')
                <a href="{{ route('admin.dashboard') }}"
                   class="block px-3 py-2 rounded hover:bg-gray-700 {{ request()->routeIs('admin.dashboard') ? 'bg-green-600' : '' }}">
                    📊 Dashboard
                </a>
                <a href="{{ route('admin.reservations') }}"
                   class="block px-3 py-2 rounded hover:bg-gray-700 {{ request()->routeIs('admin.reservations') ? 'bg-green-600' : '' }}">
                    📅 Reservations
                </a>
                
                <a href=""
                   class="block px-3 py-2 rounded hover:bg-gray-700 ">
                    📑 Reports
                </a>
                <a href="{{ route('admin.inventory.index') }}"
                   class="block px-3 py-2 rounded hover:bg-gray-700 {{ request()->routeIs('admin.inventory') ? 'bg-green-600' : '' }}">
                    📦 Inventory
                </a>
                <a href="{{ route('admin.menus.index') }}"
                   class="block px-3 py-2 rounded hover:bg-gray-700 {{ request()->routeIs('admin.menus.index') ? 'bg-green-600' : '' }}">
                    🍽 Menus
                </a>
                <a href="{{ route('admin.calendar') }}"
                   class="block px-3 py-2 rounded hover:bg-gray-700 {{ request()->routeIs('admin.calendar') ? 'bg-green-600' : '' }}">
                    📆 Calendar
                </a>
            @endif

            <!-- Account Settings -->
            <a href="{{ route('profile.edit') }}"
               class="block px-3 py-2 rounded hover:bg-gray-700 {{ request()->routeIs('profile.edit') ? 'bg-green-600' : '' }}">
                ⚙️ Account Settings
            </a>

            <!-- Logout -->
            <button @click="confirmLogout = true"
                    class="w-full text-left block px-3 py-2 rounded bg-red-600 hover:bg-red-700">
                🚪 Logout
            </button>
        </nav>
    </aside>

    <!-- Main Content -->
    <div class="flex-1 flex flex-col md:ml-64 bg-gray-100">
        <!-- Topbar (fixed) -->
        <div class="flex justify-between items-center bg-white shadow px-6 py-4 fixed top-0 left-0 right-0 md:left-64 z-30">
            <div class="flex items-center space-x-3">
                <!-- Mobile burger -->
                <button @click="openSidebar = !openSidebar"
                        class="md:hidden p-2 rounded bg-gray-200">
                    ☰
                </button>
                <h1 class="text-xl font-bold">
                    @yield('page-title', 'Dashboard')
                </h1>
            </div>

            <div class="flex items-center space-x-4">
                <!-- Search -->
                <input type="text" placeholder="Search"
                       class="border rounded px-3 py-1 focus:ring focus:ring-green-400"
                       onkeyup="filterTable(this.value)">

                <!-- Notifications -->
                <div class="relative" x-data="{ openNotif: false }">
                    <button @click="openNotif = !openNotif" class="p-2 bg-gray-200 rounded-full">🔔</button>
                    <div x-show="openNotif"
                         @click.away="openNotif = false"
                         class="absolute right-0 mt-2 w-64 bg-white border rounded shadow-lg z-50"
                         x-cloak>
                        <div class="p-3 border-b font-bold">Notifications</div>
                        <ul class="max-h-60 overflow-y-auto">
                            <li class="px-4 py-2 hover:bg-gray-100">No new notifications</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Page Content -->
        <main class="p-6 overflow-y-auto flex-1 mt-16">
            @yield('content')
        </main>
    </div>
</div>

<!-- Logout Confirmation Modal -->
<div x-show="confirmLogout"
     class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50"
     x-cloak>
    <div class="bg-white rounded-lg shadow-lg w-full max-w-sm p-6 text-black">
        <h2 class="text-lg font-bold mb-4 text-black">Confirm Logout</h2>
        <p class="mb-6 text-black">Are you sure you want to log out?</p>

        <div class="flex justify-end gap-2">
            <button @click="confirmLogout = false"
                    class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">
                Cancel
            </button>
            <form method="POST" action="{{ route('logout') }}">
                @csrf
                <button type="submit"
                        class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                    Yes, Logout
                </button>
            </form>
        </div>
    </div>
</div>

<!-- JS for search filter -->
<script>
function filterTable(query) {
    let rows = document.querySelectorAll("table tbody tr");
    query = query.toLowerCase();
    rows.forEach(row => {
        let text = row.innerText.toLowerCase();
        row.style.display = text.includes(query) ? "" : "none";
    });
}
</script>
</body>
</html>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\profile\partials\update-password-form.blade.php =====`n<section 
    x-data="{ changed: false, showCurrent: false, showNew: false, showConfirm: false }" 
    x-init="
        $watch('changed', value => {
            let btn = $refs.saveBtn;
            if (value) {
                btn.disabled = false;
                btn.classList.remove('bg-gray-400', 'cursor-not-allowed');
                btn.classList.add('bg-green-600', 'hover:bg-green-700');
            } else {
                btn.disabled = true;
                btn.classList.remove('bg-green-600', 'hover:bg-green-700');
                btn.classList.add('bg-gray-400', 'cursor-not-allowed');
            }
        });
    "
>
    <header>
        <h2 class="text-lg font-medium text-gray-900">Update Password</h2>
        <p class="mt-1 text-sm text-gray-600">
            Ensure your account is using a long, random password to stay secure.
        </p>
    </header>

    <form method="post" action="{{ route('password.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('put')

        <!-- Current Password -->
        <div class="relative">
            <x-input-label for="current_password" value="Current Password" />
            <x-text-input 
                id="current_password" name="current_password" 
                :type="showCurrent ? 'text' : 'password'"
                class="mt-1 block w-full pr-10"
                @input="changed = true"
                autocomplete="current-password"
            />
            <button type="button" @click="showCurrent = !showCurrent"
                class="absolute inset-y-0 right-2 flex items-center text-gray-600">
                👁️
            </button>
            <x-input-error class="mt-2" :messages="$errors->get('current_password')" />
        </div>

        <!-- New Password -->
        <div class="relative">
            <x-input-label for="password" value="New Password" />
            <x-text-input 
                id="password" name="password" 
                :type="showNew ? 'text' : 'password'"
                class="mt-1 block w-full pr-10"
                @input="changed = true"
                autocomplete="new-password"
            />
            <button type="button" @click="showNew = !showNew"
                class="absolute inset-y-0 right-2 flex items-center text-gray-600">
                👁️
            </button>
            <x-input-error class="mt-2" :messages="$errors->get('password')" />
        </div>

        <!-- Confirm Password -->
        <div class="relative">
            <x-input-label for="password_confirmation" value="Confirm Password" />
            <x-text-input 
                id="password_confirmation" name="password_confirmation" 
                :type="showConfirm ? 'text' : 'password'"
                class="mt-1 block w-full pr-10"
                @input="changed = true"
                autocomplete="new-password"
            />
            <button type="button" @click="showConfirm = !showConfirm"
                class="absolute inset-y-0 right-2 flex items-center text-gray-600">
                👁️
            </button>
            <x-input-error class="mt-2" :messages="$errors->get('password_confirmation')" />
        </div>

        <div class="flex items-center gap-4">
            <button type="submit" x-ref="saveBtn" disabled
                class="px-4 py-2 text-white rounded bg-gray-400 cursor-not-allowed">
                Save Password
            </button>
        </div>
    </form>
</section>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\profile\partials\update-profile-information-form.blade.php =====`n<section 
    x-data="{ changed: false }" 
    x-init="
        $watch('changed', value => {
            let btn = $refs.saveBtn;
            if (value) {
                btn.disabled = false;
                btn.classList.remove('bg-gray-400', 'cursor-not-allowed');
                btn.classList.add('bg-green-600', 'hover:bg-green-700');
            } else {
                btn.disabled = true;
                btn.classList.remove('bg-green-600', 'hover:bg-green-700');
                btn.classList.add('bg-gray-400', 'cursor-not-allowed');
            }
        });
    "
>
    <header>
        <h2 class="text-lg font-medium text-gray-900">Profile Information</h2>
        <p class="mt-1 text-sm text-gray-600">
            Update your account's profile information and email address.
        </p>
    </header>

    <form method="post" action="{{ route('profile.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('patch')

        <!-- Name -->
        <div>
            <x-input-label for="name" value="Name" />
            <x-text-input 
                id="name" name="name" type="text"
                class="mt-1 block w-full"
                value="{{ old('name', $user->name) }}"
                required autofocus
                @input="changed = true"
            />
            <x-input-error class="mt-2" :messages="$errors->get('name')" />
        </div>

        <!-- Email -->
        <div>
            <x-input-label for="email" value="Email" />
            <x-text-input 
                id="email" name="email" type="email"
                class="mt-1 block w-full"
                value="{{ old('email', $user->email) }}"
                required
                @input="changed = true"
            />
            <x-input-error class="mt-2" :messages="$errors->get('email')" />
        </div>

        <div class="flex items-center gap-4">
            <button type="submit" x-ref="saveBtn" disabled
                class="px-4 py-2 text-white rounded bg-gray-400 cursor-not-allowed">
                Save Changes
            </button>
        </div>
    </form>
</section>
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\profile\edit.blade.php =====`n@extends('layouts.sidebar')

@section('page-title', 'Account Settings')

@section('content')
<div class="bg-white shadow rounded-lg p-6">
    <h2 class="text-xl font-bold mb-6">Account Settings</h2>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Profile Information -->
        <div>
            <h3 class="text-lg font-semibold text-gray-700 mb-4">Profile Information</h3>
            <form method="POST" action="{{ route('profile.update') }}">
                @csrf
                @method('patch')

                <!-- Full Name -->
                <div class="mb-4">
                    <label for="name" class="block text-sm font-medium text-gray-700">Full Name</label>
                    <input type="text" id="name" name="name" value="{{ old('name', $user->name) }}"
                           class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500" required>
                </div>

                <!-- Personal Email -->
                <div class="mb-4">
                    <label for="email" class="block text-sm font-medium text-gray-700">Personal Email</label>
                    <input type="email" id="email" name="email" value="{{ old('email', $user->email) }}"
                           class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500" required>
                </div>
            </form>
        </div>

        <!-- Reset Password -->
        <div>
            <h3 class="text-lg font-semibold text-gray-700 mb-4">Reset Password</h3>
            <form method="POST" action="{{ route('password.update') }}">
                @csrf
                @method('put')

                <!-- Current Password -->
                <div class="mb-4">
                    <label for="current_password" class="block text-sm font-medium text-gray-700">Current Password</label>
                    <input type="password" id="current_password" name="current_password"
                           class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500" required>
                </div>

                <!-- New Password -->
                <div class="mb-4">
                    <label for="password" class="block text-sm font-medium text-gray-700">New Password</label>
                    <input type="password" id="password" name="password"
                           class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500" required>
                </div>

                <!-- Confirm Password -->
                <div class="mb-4">
                    <label for="password_confirmation" class="block text-sm font-medium text-gray-700">Confirm New Password</label>
                    <input type="password" id="password_confirmation" name="password_confirmation"
                           class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500" required>
                </div>

            </form>

        </div>
        
    </div>
<form method="POST" action="{{ route('profile.update') }}" data-confirm="true">
    @csrf
    <button type="submit" ype="submit" class="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700">Save Changes</button>
</form>

</div>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\superadmin\audit.blade.php =====`n@extends('layouts.sidebar')

@section('page-title', 'Audit Trail')

@section('content')
<div class="bg-white p-6 rounded shadow">
    <h1 class="text-2xl font-bold mb-4">Audit Trail for {{ $user->name }}</h1>

    @if(!empty($audits) && $audits->isNotEmpty())
        <table class="w-full border-collapse border">
            <thead>
                <tr class="bg-gray-200">
                    <th class="border px-4 py-2">Action</th>
                    <th class="border px-4 py-2">Date</th>
                </tr>
            </thead>
            <tbody>
                @forelse($audits as $log)
                    <tr>
                        <td class="border px-4 py-2">{{ $log->action }}</td>
                        <td class="border px-4 py-2">{{ $log->created_at->format('M d, Y h:i A') }}</td>
                    </tr>
                @empty
                    <tr>
                        <td colspan="2" class="text-center py-4">No audit records found.</td>
                    </tr>
                @endforelse
            </tbody>

        </table>
    @else
        <p>No audit records available.</p>
    @endif

    <div class="mt-4">
        <a href="{{ route('superadmin.users') }}" class="bg-gray-500 text-white px-4 py-2 rounded">← Back</a>
    </div>
</div>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\superadmin\users.blade.php =====`n

@extends('layouts.sidebar')
@section('page-title', 'Manage Users')

@section('content')
<div class="bg-white p-6 rounded shadow">
    @if(session('success'))
        <div class="mb-4 p-3 bg-green-100 text-green-800 rounded">{{ session('success') }}</div>
    @endif
    @if(session('error'))
        <div class="mb-4 p-3 bg-red-100 text-red-800 rounded">{{ session('error') }}</div>
    @endif

    <div class="flex items-center justify-between">
        <h1 class="text-2xl font-bold">User Management</h1>
        <button onclick="document.getElementById('addAdminModal').classList.remove('hidden')"
                class="bg-green-600 text-white px-4 py-2 rounded">
            + Add Admin
        </button>
    </div>

    <table class="w-full mt-6 border-collapse border">
        <thead>
            <tr class="bg-gray-200">
                <th class="border px-4 py-2 text-left">Name</th>
                <th class="border px-4 py-2 text-left">Email</th>
                <th class="border px-4 py-2 text-left">Role</th>
                <th class="border px-4 py-2 text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @forelse($users as $user)
                <tr>
                    <td class="border px-4 py-2">{{ $user->name }}</td>
                    <td class="border px-4 py-2">{{ $user->email }}</td>
                    <td class="border px-4 py-2">{{ ucfirst($user->role) }}</td>
                    <td class="border px-4 py-2 text-center space-x-2">
                        @if($user->role === 'admin')
                            <button
                                onclick="openEditModal({{ $user->id }}, '{{ e($user->name) }}', '{{ e($user->email) }}')"
                                class="px-2 py-1 bg-blue-600 text-white rounded">
                                Edit
                            </button>
                            <a href="{{ route('superadmin.users.audit', $user) }}"
                               class="px-2 py-1 bg-yellow-500 text-white rounded">
                                Audit
                            </a>
                        @else
                            <a href="{{ route('superadmin.users.audit', $user) }}"
                               class="px-2 py-1 bg-yellow-500 text-white rounded">
                                Audit
                            </a>
                        @endif

                        <form method="POST" action="{{ route('superadmin.users.destroy', $user) }}" class="inline">
                            @csrf @method('DELETE')
                            <button type="submit"
                                    onclick="return confirm('Delete this user?')"
                                    class="px-2 py-1 bg-red-600 text-white rounded">
                                Delete
                            </button>
                        </form>
                    </td>
                </tr>
            @empty
                <tr><td colspan="4" class="text-gray-500 px-4 py-6">No users found.</td></tr>
            @endforelse
        </tbody>
    </table>
</div>

{{-- Modal: Add Admin --}}
<div id="addAdminModal" class="hidden fixed inset-0 z-50 bg-black/50 flex items-center justify-center">
    <div class="bg-white p-6 rounded shadow w-96">
        <h2 class="text-xl font-bold mb-4">Add New Admin</h2>

        <form method="POST" action="{{ route('superadmin.users.store') }}"
              onsubmit="return confirm('Create this admin?')">
            @csrf
            <input type="text" name="name" placeholder="Name" class="border p-2 w-full mb-2" required>
            <input type="email" name="email" placeholder="Email" class="border p-2 w-full mb-2" required>
            <input type="password" name="password" placeholder="Password" class="border p-2 w-full mb-2" required>
            <input type="password" name="password_confirmation" placeholder="Confirm Password" class="border p-2 w-full mb-2" required>

            <div class="flex justify-end space-x-2 mt-4">
                <button type="button" onclick="document.getElementById('addAdminModal').classList.add('hidden')"
                        class="bg-gray-400 px-4 py-2 rounded">Cancel</button>
                <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded">Create</button>
            </div>
        </form>
    </div>
</div>

{{-- Modal: Edit Admin --}}
<div id="editUserModal" class="hidden fixed inset-0 z-50 bg-black/50 flex items-center justify-center">
    <div class="bg-white p-6 rounded shadow w-96">
        <h2 class="text-xl font-bold mb-4">Edit Admin</h2>

        <form id="editUserForm" method="POST" onsubmit="return confirm('Save changes to this admin?')">
            @csrf @method('PUT')
            <input type="text"   name="name"  id="editName"  class="border p-2 w-full mb-2" required>
            <input type="email"  name="email" id="editEmail" class="border p-2 w-full mb-2" required>

            <div class="flex justify-end space-x-2 mt-4">
                <button type="button" onclick="document.getElementById('editUserModal').classList.add('hidden')"
                        class="bg-gray-400 px-4 py-2 rounded">Cancel</button>
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Update</button>
            </div>
        </form>
    </div>
</div>

<script>
function openEditModal(id, name, email) {
    document.getElementById('editUserModal').classList.remove('hidden');
    document.getElementById('editName').value = name;
    document.getElementById('editEmail').value = email;
    document.getElementById('editUserForm').action = `/cafeteria-system/public/superadmin/users/${id}`;
}
</script>
@endsection
`n`n
===== C:\xampp\htdocs\cafeteria-system\resources\views\welcome.blade.php =====`n<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Cafeteria</title>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div class="text-center">
        <h1 class="text-3xl font-bold mb-6">Smart Cafeteria Management System</h1>
        
        <div class="flex justify-center gap-4">
            <a href="{{ route('login') }}" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                Login
            </a>
            <a href="{{ route('register') }}" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                Register
            </a>
        </div>
    </div>
</body>
</html>
`n`n
===== C:\xampp\htdocs\cafeteria-system\routes\auth.php =====`n<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])
        ->name('register');

    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])
        ->name('login');

    Route::post('login', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
        ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
        ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
        ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
        ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
        ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
        ->middleware('throttle:6,1')
        ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
        ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
        ->name('logout');
});

`n`n
===== C:\xampp\htdocs\cafeteria-system\routes\console.php =====`n<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
`n`n
===== C:\xampp\htdocs\cafeteria-system\routes\web.php =====`n<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\CustomerHomeController;
use App\Http\Controllers\AdminDashboardController;
use App\Http\Controllers\SuperAdminController;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\{
    MenuController, RecipeController, ReservationController, CalendarController, InventoryItemController
};
// ---------- Index -> Login ----------
Route::get('/', fn () => redirect()->route('login'))->name('home');

// ---------- Breeze auth routes (login, register, logout, password, etc.) ----------
require __DIR__ . '/auth.php';

// ---------- Dashboard redirect helper ----------
Route::get('/dashboard', function () {
    $user = \Illuminate\Support\Facades\Auth::user();
    if (!$user) return redirect()->route('login');

    return match ($user->role) {
        'superadmin' => redirect()->route('superadmin.users'),
        'admin'      => redirect()->route('admin.dashboard'),
        default      => redirect()->route('customer.home'),
    };
})->middleware(['auth'])->name('dashboard');

// ---------- Profile (Account Settings) ----------
Route::middleware(['auth'])->group(function () {
    Route::get('/profile',  [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile',[ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile',[ProfileController::class, 'destroy'])->name('profile.destroy');
});

// ---------- Superadmin ----------
Route::middleware(['auth', 'role:superadmin'])
    ->prefix('superadmin')
    ->name('superadmin.')
    ->group(function () {
        Route::get   ('/users',            [SuperAdminController::class, 'index'])->name('users');
        Route::post  ('/users',            [SuperAdminController::class, 'store'])->name('users.store');
        Route::put   ('/users/{user}',     [SuperAdminController::class, 'update'])->name('users.update');
        Route::delete('/users/{user}',     [SuperAdminController::class, 'destroy'])->name('users.destroy');
        Route::get   ('/users/{user}/audit',[SuperAdminController::class, 'audit'])->name('users.audit');
    });

// ---------- Admin ----------
Route::middleware(['auth', 'role:admin'])
    ->prefix('admin')
    ->name('admin.')
    ->group(function () {
        Route::get('/dashboard', [AdminDashboardController::class, 'index'])->name('dashboard');
        Route::get('/calendar', [CalendarController::class, 'index'])->name('calendar');

        Route::resource('inventory', InventoryItemController::class);
        Route::resource('menus', MenuController::class);
        Route::post('/menus/{menu}/items', [MenuController::class,'addItem'])->name('menus.items.store');

        // Recipes
        Route::get   ('/menu-items/{menuItem}/recipes', [RecipeController::class,'index'])->name('recipes.index');
        Route::post  ('/menu-items/{menuItem}/recipes', [RecipeController::class,'store'])->name('recipes.store');
        Route::delete('/menu-items/{menuItem}/recipes/{recipe}', [RecipeController::class,'destroy'])->name('recipes.destroy');

        // Reservations (names align with your Blade: admin.reservations, admin.reservations.show, etc.)
        Route::get  ('/reservations',                       [ReservationController::class,'index'])->name('reservations');
        Route::get  ('/reservations/{reservation}',         [ReservationController::class,'show'])->name('reservations.show');
        Route::patch('/reservations/{reservation}/approve', [ReservationController::class,'approve'])->name('reservations.approve');
        Route::patch('/reservations/{reservation}/decline', [ReservationController::class,'decline'])->name('reservations.decline');
    });



// ---------- Customer ----------
Route::middleware(['auth', 'role:customer'])->group(function () {
    Route::get('/home', [CustomerHomeController::class, 'index'])->name('customer.home');
    Route::post('/reservations', [CustomerHomeController::class, 'store'])->name('reservations.store');
});
`n`n
===== .env =====`nAPP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:4RQORWRxryjiOqdU4tC4/E0awFkLKAl25dP79EQfnDE=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

# DB_CONNECTION=sqlite
# # DB_HOST=127.0.0.1
# # DB_PORT=3306
# # DB_DATABASE=laravel
# # DB_USERNAME=root
# # DB_PASSWORD=

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=cafeteria
DB_USERNAME=root
DB_PASSWORD=


SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database

CACHE_STORE=database
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_ENCRYPTION=tls        # STARTTLS
MAIL_USERNAME=devscarbin@gmail.com
MAIL_PASSWORD=Baekhyunnie24
MAIL_FROM_ADDRESS=devscarbin@gmail.com
MAIL_FROM_NAME="Cafeteria System"


AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"

VONAGE_KEY=your_key
VONAGE_SECRET=your_secret
VONAGE_SMS_FROM=YourBrand
`n`n
